[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/browser/background/commands.js",
    "content": "chrome.commands.onCommand.addListener(function (command) {\n    (pages || []).forEach(page => {\n        page.postMessage({method: command, args: []});\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/Lt-Mayonesa/browser-mpris2/src/browser/background/commands.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "file",
    "name": "src/browser/background/proxy.js",
    "content": "let connections = 0;\nlet host = null;\nlet pages = [];\n\nchrome.runtime.onConnect.addListener(function (page) {\n    if (!connections++)\n        host = chrome.runtime.connectNative('org.mpris.browser_host.debug');\n\n    pages.push(page);\n    function passMessage (msg) {\n        if (msg.tabId === page.sender.tab.id || msg.tabId < 0) {\n            switch (msg.method) {\n                case 'Raise':\n                    raiseTab(msg.tabId);\n                    break;\n                case 'Quit':\n                    removeTab(msg.tabId);\n                    break;\n                default:\n                    page.postMessage(msg);\n            }\n        }\n    }\n\n    host.onMessage.addListener(passMessage);\n\n    page.onMessage.addListener(function (msg) {\n        msg.tabId = page.sender.tab.id;\n        host.postMessage(msg);\n    });\n    page.onDisconnect.addListener(function () {\n        host.postMessage({ type: 'quit', tabId: page.sender.tab.id });\n        host.onMessage.removeListener(passMessage);\n        if (!--connections)\n            host.disconnect();\n    });\n});\n\nfunction raiseTab (tabId) {\n    // first activate the tab, this means it's current in its window\n    chrome.tabs.update(tabId, { active: true }, function (tab) {\n        if (chrome.runtime.lastError || !tab) {\n            // this \"lastError\" stuff feels so archaic\n            // failed to update\n            return;\n        }\n        // then raise the tab's window too\n        chrome.windows.update(tab.windowId, { focused: true });\n    });\n}\n\nfunction removeTab (tabId) {\n    chrome.tabs.remove(tabId);\n}\n",
    "static": true,
    "longname": "/home/travis/build/Lt-Mayonesa/browser-mpris2/src/browser/background/proxy.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "connections",
    "memberof": "src/browser/background/proxy.js",
    "static": true,
    "longname": "src/browser/background/proxy.js~connections",
    "access": "public",
    "export": false,
    "importPath": "browser-mpris2/src/browser/background/proxy.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "name": "host",
    "memberof": "src/browser/background/proxy.js",
    "static": true,
    "longname": "src/browser/background/proxy.js~host",
    "access": "public",
    "export": false,
    "importPath": "browser-mpris2/src/browser/background/proxy.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "variable",
    "name": "pages",
    "memberof": "src/browser/background/proxy.js",
    "static": true,
    "longname": "src/browser/background/proxy.js~pages",
    "access": "public",
    "export": false,
    "importPath": "browser-mpris2/src/browser/background/proxy.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "function",
    "name": "raiseTab",
    "memberof": "src/browser/background/proxy.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/browser/background/proxy.js~raiseTab",
    "access": "public",
    "export": false,
    "importPath": "browser-mpris2/src/browser/background/proxy.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [
      {
        "name": "tabId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 54,
    "kind": "function",
    "name": "removeTab",
    "memberof": "src/browser/background/proxy.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/browser/background/proxy.js~removeTab",
    "access": "public",
    "export": false,
    "importPath": "browser-mpris2/src/browser/background/proxy.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [
      {
        "name": "tabId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 55,
    "kind": "file",
    "name": "src/browser/background/updater.js",
    "content": "chrome.runtime.onStartup.addListener(() => {\n    fetch('https://api.github.com/repos/lt-mayonesa/browser-mpris2/releases/latest')\n      .then(response => response.json())\n      .then(json => {\n          return {\n              title: json.name, version: json.tag_name, artifact: json.assets[0].browser_download_url\n          };\n      })\n      .then(data => {\n          let current = chrome.runtime.getManifest().version\n            .replace('v', '')\n            .replace(/\\./g, '');\n          let latest = data.version.replace('v', '')\n            .replace(/\\./g, '');\n          if (Number(latest) > Number(current)) {\n              chrome.browserAction.setBadgeText({\n                  text: 'new'\n              });\n              chrome.browserAction.setBadgeBackgroundColor({\n                  color: '#F00'\n              });\n          }\n      })\n      .catch(console.error);\n});\n",
    "static": true,
    "longname": "/home/travis/build/Lt-Mayonesa/browser-mpris2/src/browser/background/updater.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 56,
    "kind": "file",
    "name": "src/browser/init.js",
    "content": "hackAudioTags();\n\n// If this project grows we should consider dependency injection\n/**\n * The instance of {@link Playback} for this web site.\n * We define it here so it can be accessed by any provider specific code.\n * @const {Playback}\n */\nconst playback = new Playback();\n\n/**\n * The instance of {@link Carrier} for this web site.\n * There should be no need to interact directly with it.\n * @const {Carrier}\n */\nconst carrier = new Carrier();\n\n/**\n * The instance of {@link Host} for this web site.\n * There should be no need to interact directly with it.\n * @const {Host}\n */\nconst host = new Host(playback, carrier, chrome.runtime.connect());\n\n/**\n * The instance of {@link Page} for this web site.\n * We define it here so it can be accessed by any provider specific code.\n * @const {Page}\n */\nconst page = new Page(document, playback, host);\n\nwindow.addEventListener('load', () => {\n\n    page.checkForMediaElements();\n\n    page.observeForMedia(document.documentElement);\n\n    setTimeout(() => {\n        page.checkForMediaElements();\n    }, 1000);\n\n    window.dispatchEvent(new Event('mpris2-setup'));\n});\n\nwindow.addEventListener('DOMContentLoaded', () => {\n    page.checkForMediaElements();\n});\n\n/**\n * Here we replace the <b>document.createElement</b> function with our own so we can detect\n * when an &lt;audio&gt; tag is created that is not added to the DOM which most pages do\n * while a &lt;video&gt; tag typically ends up being displayed to the user, audio is not.\n *\n * Original code from {@link https://github.com/KDE/plasma-browser-integration/blob/master/extension/content-script.js}\n * @ignore\n */\nfunction hackAudioTags () {\n    // Bug 379087: Only inject this stuff if we're a proper HTML page\n    // otherwise we might end up messing up XML stuff\n    // only if our documentElement is a \"html\" tag we'll do it\n    // the rest is only set up in DOMContentLoaded which is only executed for proper pages anyway\n\n    // tagName always returned \"HTML\" for me but I wouldn't trust it always being uppercase\n    if (document.documentElement.tagName.toLowerCase() === 'html') {\n        // HACK We cannot really pass variables from the page's scope to our content-script's scope\n        // so we just blatantly insert the <audio> tag in the DOM and pick it up through our regular\n        // mechanism. Let's see how this goes :D\n\n        executeScript(`function() {\n                var oldCreateElement = document.createElement;\n                document.createElement = function () {\n                    var createdTag = oldCreateElement.apply(this, arguments);\n                    var tagName = arguments[0];\n                    if (typeof tagName === \"string\" && tagName.toLowerCase() === \"audio\") {\n                        (document.head || document.documentElement).appendChild(createdTag);\n                    }\n                    return createdTag;\n                };\n            }\n        `);\n\n        // We also briefly add items created as new Audio() to the DOM so we can control it\n        // similar to the document.createElement hack above\n        executeScript(`function() {\n                var oldAudio = window.Audio;\n                window.Audio = function () {\n                    var createdAudio = new (Function.prototype.bind.apply(oldAudio, arguments));\n                    (document.head || document.documentElement).appendChild(createdAudio);\n                    createdAudio.parentNode.removeChild(createdAudio);\n                    return createdAudio;\n                };\n            }\n        `);\n    }\n}\n\n/**\n * Execute a script on the current context and then remove it\n *\n * @ignore\n * @param {string} script\n */\nfunction executeScript (script) {\n    let element = document.createElement('script');\n    element.innerHTML = '(' + script + ')();';\n    (document.body || document.head || document.documentElement).appendChild(element);\n    // We need to remove the script tag after inserting or else websites relying on the order of items in\n    // document.getElementsByTagName(\"script\") will break (looking at you, Google Hangouts)\n    element.parentNode.removeChild(element);\n}\n",
    "static": true,
    "longname": "/home/travis/build/Lt-Mayonesa/browser-mpris2/src/browser/init.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 57,
    "kind": "variable",
    "name": "playback",
    "memberof": "src/browser/init.js",
    "static": true,
    "longname": "src/browser/init.js~playback",
    "access": "public",
    "export": false,
    "importPath": "browser-mpris2",
    "importStyle": null,
    "description": "The instance of {@link Playback} for this web site.\nWe define it here so it can be accessed by any provider specific code.",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@const",
        "tagValue": "{Playback}"
      }
    ],
    "type": {
      "types": [
        "src/browser/main/playback.js~Playback"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "variable",
    "name": "carrier",
    "memberof": "src/browser/init.js",
    "static": true,
    "longname": "src/browser/init.js~carrier",
    "access": "public",
    "export": false,
    "importPath": "browser-mpris2",
    "importStyle": null,
    "description": "The instance of {@link Carrier} for this web site.\nThere should be no need to interact directly with it.",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@const",
        "tagValue": "{Carrier}"
      }
    ],
    "type": {
      "types": [
        "src/browser/main/carrier.js~Carrier"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "variable",
    "name": "host",
    "memberof": "src/browser/init.js",
    "static": true,
    "longname": "src/browser/init.js~host",
    "access": "public",
    "export": false,
    "importPath": "browser-mpris2",
    "importStyle": null,
    "description": "The instance of {@link Host} for this web site.\nThere should be no need to interact directly with it.",
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@const",
        "tagValue": "{Host}"
      }
    ],
    "type": {
      "types": [
        "src/browser/main/host.js~Host"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "variable",
    "name": "page",
    "memberof": "src/browser/init.js",
    "static": true,
    "longname": "src/browser/init.js~page",
    "access": "public",
    "export": false,
    "importPath": "browser-mpris2",
    "importStyle": null,
    "description": "The instance of {@link Page} for this web site.\nWe define it here so it can be accessed by any provider specific code.",
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@const",
        "tagValue": "{Page}"
      }
    ],
    "type": {
      "types": [
        "src/browser/main/page.js~Page"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "function",
    "name": "hackAudioTags",
    "memberof": "src/browser/init.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/browser/init.js~hackAudioTags",
    "access": "public",
    "export": false,
    "importPath": "browser-mpris2",
    "importStyle": null,
    "description": "Here we replace the <b>document.createElement</b> function with our own so we can detect\nwhen an &lt;audio&gt; tag is created that is not added to the DOM which most pages do\nwhile a &lt;video&gt; tag typically ends up being displayed to the user, audio is not.\n\nOriginal code from {@link https://github.com/KDE/plasma-browser-integration/blob/master/extension/content-script.js}",
    "lineNumber": 57,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 62,
    "kind": "function",
    "name": "executeScript",
    "memberof": "src/browser/init.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/browser/init.js~executeScript",
    "access": "public",
    "export": false,
    "importPath": "browser-mpris2",
    "importStyle": null,
    "description": "Execute a script on the current context and then remove it",
    "lineNumber": 103,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "script",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 63,
    "kind": "file",
    "name": "src/browser/main/carrier.js",
    "content": "/**\n * A class in charge of building the payload expected by the native app\n * the payload must be a {@link Payload}\n */\nclass Carrier {\n    /**\n     * Generate a new {@link Carrier}\n     */\n    constructor () {\n        /**\n         *\n         * @type {Payload}\n         */\n        this.last = {};\n    }\n\n    /**\n     * Clear the last payload sent\n     */\n    clear () {\n        this.last = {};\n    }\n\n    /**\n     * Store the last payload sent\n     * @param {Payload} payload\n     */\n    store (payload) {\n        this.last = payload;\n    }\n\n    /**\n     *\n     * @param {Playback} playback\n     * @returns {Payload}\n     */\n    payloadFrom (playback) {\n        return {\n            PlaybackStatus: playback.getStatus(),\n            LoopStatus: playback.getLoopStatus(),\n            Shuffle: playback.isShuffle(),\n            Volume: playback.getVolume(),\n            CanGoNext: playback.canGoNext(),\n            CanGoPrevious: playback.canGoPrevious(),\n            Identity: playback.getIdentity(),\n            Rate: playback.getRate(),\n            Metadata: {\n                'mpris:trackid': playback.activePlayer.getId(),\n                'mpris:length': playback.activePlayer.getLength(),\n                'mpris:artUrl': playback.activePlayer.getCover(),\n                'xesam:url': playback.activePlayer.getUrl(),\n                'xesam:title': playback.activePlayer.getTitle(),\n                'xesam:artist': playback.activePlayer.getArtists(),\n            }\n        };\n    }\n\n    /**\n     *\n     * @param {Payload} payload\n     * @return {Payload}\n     */\n    onlyUpdated (payload) {\n        let diffs = {\n            Metadata: {}\n        };\n        for (let prop in payload) {\n            if (prop === 'Metadata') {\n                let changed = false;\n                for (let meta in payload.Metadata) {\n                    if (JSON.stringify(payload.Metadata[meta]) !== (this.last.Metadata && JSON.stringify(this.last.Metadata[meta]))) {\n                        changed = true;\n                    }\n                }\n                if (changed)\n                    diffs.Metadata = payload.Metadata;\n            } else if (payload[prop] !== this.last[prop])\n                diffs[prop] = payload[prop];\n        }\n        if (Object.keys(diffs.Metadata).length === 0)\n            delete diffs.Metadata;\n        // noinspection JSValidateTypes\n        return diffs;\n    }\n\n    /**\n     *\n     * @param {Playback} playback\n     * @returns {Payload}\n     */\n    requestPayload (playback) {\n        let payload = this.payloadFrom(playback);\n        let diffs = this.onlyUpdated(payload);\n        this.store(payload);\n        return diffs;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/Lt-Mayonesa/browser-mpris2/src/browser/main/carrier.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 64,
    "kind": "class",
    "name": "Carrier",
    "memberof": "src/browser/main/carrier.js",
    "static": true,
    "longname": "src/browser/main/carrier.js~Carrier",
    "access": "public",
    "export": false,
    "importPath": "browser-mpris2/src/browser/main/carrier.js",
    "importStyle": null,
    "description": "A class in charge of building the payload expected by the native app\nthe payload must be a {@link Payload}",
    "lineNumber": 5,
    "interface": false
  },
  {
    "__docId__": 65,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/browser/main/carrier.js~Carrier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/carrier.js~Carrier#constructor",
    "access": "public",
    "description": "Generate a new {@link Carrier}",
    "lineNumber": 9
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "last",
    "memberof": "src/browser/main/carrier.js~Carrier",
    "static": false,
    "longname": "src/browser/main/carrier.js~Carrier#last",
    "access": "public",
    "description": "",
    "lineNumber": 14,
    "type": {
      "nullable": null,
      "types": [
        "Payload"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "clear",
    "memberof": "src/browser/main/carrier.js~Carrier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/carrier.js~Carrier#clear",
    "access": "public",
    "description": "Clear the last payload sent",
    "lineNumber": 20,
    "params": [],
    "return": null
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "store",
    "memberof": "src/browser/main/carrier.js~Carrier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/carrier.js~Carrier#store",
    "access": "public",
    "description": "Store the last payload sent",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "Payload"
        ],
        "spread": false,
        "optional": false,
        "name": "payload",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "payloadFrom",
    "memberof": "src/browser/main/carrier.js~Carrier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/carrier.js~Carrier#payloadFrom",
    "access": "public",
    "description": "",
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Payload}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Playback"
        ],
        "spread": false,
        "optional": false,
        "name": "playback",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Payload"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "onlyUpdated",
    "memberof": "src/browser/main/carrier.js~Carrier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/carrier.js~Carrier#onlyUpdated",
    "access": "public",
    "description": "",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "Payload"
        ],
        "spread": false,
        "optional": false,
        "name": "payload",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Payload"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "requestPayload",
    "memberof": "src/browser/main/carrier.js~Carrier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/carrier.js~Carrier#requestPayload",
    "access": "public",
    "description": "",
    "lineNumber": 91,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Payload}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Playback"
        ],
        "spread": false,
        "optional": false,
        "name": "playback",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Payload"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 74,
    "kind": "file",
    "name": "src/browser/main/globals.js",
    "content": "/**\n *\n * @enum {string}\n * @property {string} CHANGE=changed - whether a mrpis2 property has changed\n * @property {string} RETURN=return - if we are returning an expected value\n * @property {string} SEEK=seeked - seeking\n * @property {string} QUIT=quit - inform to close the player\n */\nconst MessageType = {\n    CHANGE: 'changed',\n    RETURN: 'return',\n    SEEK: 'seeked',\n    QUIT: 'quit'\n};\n\n/**\n *\n * @enum {string}\n * @property {string} GET=Get - request a property from the client\n * @property {string} SET=Set - request to set a property in the client\n * @property {string} PLAY=Play - request to start playing the current media\n * @property {string} PAUSE=Pause - request to pause the current media\n * @property {string} TOGGLE=PlayPause - request to toggle playback of current media\n * @property {string} STOP=Stop - request to completely stop playback\n * @property {string} NEXT=Next - request to skip to next media\n * @property {string} PREVIOUS=Previous - request to skip to previous media\n * @property {string} SEEK=Seek - request to move current playback position by some offset\n * @property {string} SET_POSITION=SetPosition - request to move current playback position to specific point\n */\nconst MessageMethod = {\n    GET: 'Get',\n    SET: 'Set',\n    PLAY: 'Play',\n    PAUSE: 'Pause',\n    TOGGLE: 'PlayPause',\n    STOP: 'Stop',\n    NEXT: 'Next',\n    PREVIOUS: 'Previous',\n    SEEK: 'Seek',\n    SET_POSITION: 'SetPosition'\n};\n\n/**\n *\n * @enum {string}\n * @property {string} POSITION=Position - the time of playback\n * @property {string} RATE=Rate - the speed rate of playback\n * @property {string} VOLUME=Volume - the volume of playback\n * @property {string} SHUFFLE=Shuffle - the shuffle state of playback\n * @property {string} LOOP_STATUS=LoopStatus - the loop status of playback\n * @property {string} FULL_SCREEN=Fullscreen - the fullscreen state\n */\nconst MessageProperty = {\n    POSITION: 'Position',\n    RATE: 'Rate',\n    VOLUME: 'Volume',\n    SHUFFLE: 'Shuffle',\n    LOOP_STATUS: 'LoopStatus',\n    FULL_SCREEN: 'Fullscreen'\n};\n\n/**\n * Constants for playback looping support\n *\n * By default only <b>NONE</b> and <b>TRACK</b> are supported,\n * <b>PLAYLIST</b> looping should be implemented by provider\n *\n *\n * @enum {string}\n * @property {string} NONE=None - default playback\n * @property {string} TRACK=Track - playback will loop current track\n * @property {string} PLAYLIST=Playlist - playback will loop current playlist\n */\nconst LoopStatus = {\n    NONE: 'None',\n    TRACK: 'Track',\n    PLAYLIST: 'Playlist'\n};\n\n/**\n * Constants for playback status\n *\n * @constant {Object}\n * @property {string} PLAYING=Playing - the media is playing\n * @property {string} PAUSED=Paused - the media is paused\n * @property {string} STOPPED=Stopped - the media is stopped\n */\nconst PlaybackStatus = {\n    PLAYING: 'Playing',\n    PAUSED: 'Paused',\n    STOPPED: 'Stopped'\n};\n\n/**\n * @typedef {Object} Metadata\n * @property {string} ['mpris:trackid'] - the track id (can be anything)\n * @property {number} ['mpris:length'] - the length of the media\n * @property {string} ['mpris:artUrl'] - the url of the cover image\n * @property {string} ['xesam:url'] - the url of the media\n * @property {string} ['xesam:title'] - the title of the media\n * @property {Array<string>} ['xesam:artist'] - an array containing the artists\n */\n\n/**\n * A payload that the native app understands\n *\n * @typedef {Object} Payload\n * @property {PlaybackStatus} [PlaybackStatus] - Playing or Paused\n * @property {LoopStatus} [LoopStatus] - the loop status\n * @property {boolean} [Shuffle] - is shuffle on\n * @property {number} [Volume] - the volume\n * @property {boolean} [CanGoNext] - if the next button should be enabled\n * @property {boolean} [CanGoPrevious] - if previous button should be enabled\n * @property {string} [Identity] - the identity of the mpris player\n * @property {number} [Rate] - the playback speed of the media\n * @property {Metadata} [Metadata] - the media specific information\n */\nlet Payload;\n\n",
    "static": true,
    "longname": "/home/travis/build/Lt-Mayonesa/browser-mpris2/src/browser/main/globals.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 75,
    "kind": "variable",
    "name": "MessageType",
    "memberof": "src/browser/main/globals.js",
    "static": true,
    "longname": "src/browser/main/globals.js~MessageType",
    "access": "public",
    "export": false,
    "importPath": "browser-mpris2/src/browser/main/globals.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@enum",
        "tagValue": "{string}"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "changed",
        "defaultRaw": "changed",
        "name": "CHANGE",
        "description": "whether a mrpis2 property has changed"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "return",
        "defaultRaw": "return",
        "name": "RETURN",
        "description": "if we are returning an expected value"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "seeked",
        "defaultRaw": "seeked",
        "name": "SEEK",
        "description": "seeking"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "quit",
        "defaultRaw": "quit",
        "name": "QUIT",
        "description": "inform to close the player"
      }
    ],
    "type": {
      "types": [
        "{\"CHANGE\": string, \"RETURN\": string, \"SEEK\": string, \"QUIT\": string}"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "variable",
    "name": "MessageMethod",
    "memberof": "src/browser/main/globals.js",
    "static": true,
    "longname": "src/browser/main/globals.js~MessageMethod",
    "access": "public",
    "export": false,
    "importPath": "browser-mpris2/src/browser/main/globals.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@enum",
        "tagValue": "{string}"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "Get",
        "defaultRaw": "Get",
        "name": "GET",
        "description": "request a property from the client"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "Set",
        "defaultRaw": "Set",
        "name": "SET",
        "description": "request to set a property in the client"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "Play",
        "defaultRaw": "Play",
        "name": "PLAY",
        "description": "request to start playing the current media"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "Pause",
        "defaultRaw": "Pause",
        "name": "PAUSE",
        "description": "request to pause the current media"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "PlayPause",
        "defaultRaw": "PlayPause",
        "name": "TOGGLE",
        "description": "request to toggle playback of current media"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "Stop",
        "defaultRaw": "Stop",
        "name": "STOP",
        "description": "request to completely stop playback"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "Next",
        "defaultRaw": "Next",
        "name": "NEXT",
        "description": "request to skip to next media"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "Previous",
        "defaultRaw": "Previous",
        "name": "PREVIOUS",
        "description": "request to skip to previous media"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "Seek",
        "defaultRaw": "Seek",
        "name": "SEEK",
        "description": "request to move current playback position by some offset"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "SetPosition",
        "defaultRaw": "SetPosition",
        "name": "SET_POSITION",
        "description": "request to move current playback position to specific point"
      }
    ],
    "type": {
      "types": [
        "{\"GET\": string, \"SET\": string, \"PLAY\": string, \"PAUSE\": string, \"TOGGLE\": string, \"STOP\": string, \"NEXT\": string, \"PREVIOUS\": string, \"SEEK\": string, \"SET_POSITION\": string}"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "variable",
    "name": "MessageProperty",
    "memberof": "src/browser/main/globals.js",
    "static": true,
    "longname": "src/browser/main/globals.js~MessageProperty",
    "access": "public",
    "export": false,
    "importPath": "browser-mpris2/src/browser/main/globals.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 53,
    "unknown": [
      {
        "tagName": "@enum",
        "tagValue": "{string}"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "Position",
        "defaultRaw": "Position",
        "name": "POSITION",
        "description": "the time of playback"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "Rate",
        "defaultRaw": "Rate",
        "name": "RATE",
        "description": "the speed rate of playback"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "Volume",
        "defaultRaw": "Volume",
        "name": "VOLUME",
        "description": "the volume of playback"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "Shuffle",
        "defaultRaw": "Shuffle",
        "name": "SHUFFLE",
        "description": "the shuffle state of playback"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "LoopStatus",
        "defaultRaw": "LoopStatus",
        "name": "LOOP_STATUS",
        "description": "the loop status of playback"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "Fullscreen",
        "defaultRaw": "Fullscreen",
        "name": "FULL_SCREEN",
        "description": "the fullscreen state"
      }
    ],
    "type": {
      "types": [
        "{\"POSITION\": string, \"RATE\": string, \"VOLUME\": string, \"SHUFFLE\": string, \"LOOP_STATUS\": string, \"FULL_SCREEN\": string}"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "variable",
    "name": "LoopStatus",
    "memberof": "src/browser/main/globals.js",
    "static": true,
    "longname": "src/browser/main/globals.js~LoopStatus",
    "access": "public",
    "export": false,
    "importPath": "browser-mpris2/src/browser/main/globals.js",
    "importStyle": null,
    "description": "Constants for playback looping support\n\nBy default only <b>NONE</b> and <b>TRACK</b> are supported,\n<b>PLAYLIST</b> looping should be implemented by provider",
    "lineNumber": 74,
    "unknown": [
      {
        "tagName": "@enum",
        "tagValue": "{string}"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "None",
        "defaultRaw": "None",
        "name": "NONE",
        "description": "default playback"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "Track",
        "defaultRaw": "Track",
        "name": "TRACK",
        "description": "playback will loop current track"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "Playlist",
        "defaultRaw": "Playlist",
        "name": "PLAYLIST",
        "description": "playback will loop current playlist"
      }
    ],
    "type": {
      "types": [
        "{\"NONE\": string, \"TRACK\": string, \"PLAYLIST\": string}"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "variable",
    "name": "PlaybackStatus",
    "memberof": "src/browser/main/globals.js",
    "static": true,
    "longname": "src/browser/main/globals.js~PlaybackStatus",
    "access": "public",
    "export": false,
    "importPath": "browser-mpris2/src/browser/main/globals.js",
    "importStyle": null,
    "description": "Constants for playback status",
    "lineNumber": 88,
    "unknown": [
      {
        "tagName": "@constant",
        "tagValue": "{Object}"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "Playing",
        "defaultRaw": "Playing",
        "name": "PLAYING",
        "description": "the media is playing"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "Paused",
        "defaultRaw": "Paused",
        "name": "PAUSED",
        "description": "the media is paused"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "Stopped",
        "defaultRaw": "Stopped",
        "name": "STOPPED",
        "description": "the media is stopped"
      }
    ],
    "type": {
      "types": [
        "{\"PLAYING\": string, \"PAUSED\": string, \"STOPPED\": string}"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "typedef",
    "name": "Metadata",
    "memberof": "src/browser/main/globals.js",
    "static": true,
    "longname": "src/browser/main/globals.js~Metadata",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "'mpris:trackid'",
        "description": "the track id (can be anything)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "'mpris:length'",
        "description": "the length of the media"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "'mpris:artUrl'",
        "description": "the url of the cover image"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "'xesam:url'",
        "description": "the url of the media"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "'xesam:title'",
        "description": "the title of the media"
      },
      {
        "nullable": null,
        "types": [
          "Array<string>"
        ],
        "spread": false,
        "optional": true,
        "name": "'xesam:artist'",
        "description": "an array containing the artists"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Metadata"
    }
  },
  {
    "__docId__": 81,
    "kind": "typedef",
    "name": "Payload",
    "memberof": "src/browser/main/globals.js",
    "static": true,
    "longname": "src/browser/main/globals.js~Payload",
    "access": "public",
    "description": "A payload that the native app understands",
    "lineNumber": 118,
    "properties": [
      {
        "nullable": null,
        "types": [
          "PlaybackStatus"
        ],
        "spread": false,
        "optional": true,
        "name": "PlaybackStatus",
        "description": "Playing or Paused"
      },
      {
        "nullable": null,
        "types": [
          "LoopStatus"
        ],
        "spread": false,
        "optional": true,
        "name": "LoopStatus",
        "description": "the loop status"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "Shuffle",
        "description": "is shuffle on"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "Volume",
        "description": "the volume"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "CanGoNext",
        "description": "if the next button should be enabled"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "CanGoPrevious",
        "description": "if previous button should be enabled"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "Identity",
        "description": "the identity of the mpris player"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "Rate",
        "description": "the playback speed of the media"
      },
      {
        "nullable": null,
        "types": [
          "Metadata"
        ],
        "spread": false,
        "optional": true,
        "name": "Metadata",
        "description": "the media specific information"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Payload"
    }
  },
  {
    "__docId__": 82,
    "kind": "file",
    "name": "src/browser/main/host.js",
    "content": "/**\n *\n * A class in charge of communicating back and forth with the native app.\n *\n * There should be no need to modify/extend this class\n * as it uses {@link Playback} to build the messages to send\n * and as the receiver of all messages from the MPRIS2 interfase\n *\n */\nclass Host {\n    /**\n     *\n     * @param {Playback} playback - the playback of the current site\n     * @param {Carrier} carrier\n     * @param {Object} port - see {@link https://developer.chrome.com/apps/runtime#type-Port}\n     */\n    constructor (playback, carrier, port) {\n        /**\n         * The playback to interact with\n         * @type {Playback}\n         */\n        this.playback = playback;\n        /**\n         * A carrier for caching and building the payloads\n         * @type {Carrier}\n         */\n        this.carrier = carrier;\n        /**\n         * A chrome.runtime.Port\n         * @see https://developer.chrome.com/apps/runtime#type-Port\n         * @type {Object}\n         */\n        this.port = port;\n\n        /**\n         * The default Payload.Identity for the MPRIS2 Interface\n         * @type {string}\n         */\n        this.source = 'browser';\n\n        this.port.onMessage.addListener((r, s, sr) => this.messageListener(r));\n    }\n\n    /**\n     * Send a message to host app\n     *\n     * @param {MessageType} type\n     * @param {Object|number} [payload]\n     */\n    sendMessage (type, payload) {\n        this.port.postMessage({\n            source: this.source,\n            type: type,\n            args: [payload]\n        });\n    }\n\n    /**\n     * Send a change message to host app\n     */\n    change () {\n        if (this.playback.activePlayer) {\n            let payload = this.carrier.requestPayload(this.playback);\n            if (Object.keys(payload || {}).length)\n                this.sendMessage(\n                  MessageType.CHANGE,\n                  payload\n                );\n        }\n    }\n\n    /**\n     * Set player as active player and send data to native app\n     *\n     * @param {Player} player\n     */\n    start (player) {\n        this.playback.setActivePlayer(player);\n        this.change();\n    }\n\n    /**\n     *\n     * @param {MessageMethod} method\n     * @param {*} args\n     */\n    return (method, args) {\n        this.port.postMessage({\n            source: this.source,\n            type: MessageType.RETURN,\n            method, args\n        });\n    }\n\n    /**\n     * Send a seeked message to host\n     *\n     * @param {Player} player\n     */\n    seeked (player) {\n        this.sendMessage(\n          MessageType.SEEK,\n          player.getPosition()\n        );\n    }\n\n    /**\n     * Send a quit message to host\n     */\n    quit () {\n        this.carrier.clear();\n        this.sendMessage(\n          MessageType.QUIT\n        );\n    }\n\n    /**\n     * Listener for messages from native application (aka: mpris interface)\n     *\n     * @param {Object} request\n     * @param {MessageMethod} request.method\n     * @param {Array}  request.args\n     */\n    messageListener (request) {\n        let result;\n        if (request.method === MessageMethod.GET) {\n            result = this.get(...request.args);\n        } else if (request.method === MessageMethod.SET) {\n            result = this.set(...request.args);\n        } else {\n            result = this.command(request.method, ...request.args);\n        }\n        this.return(request.method, result);\n    }\n\n    /**\n     * Native application wants to Get a property from client\n     *\n     * @param {string} _ - org.mpris.MediaPlayer2.Player\n     * @param {MessageProperty} propName - property that should be returned\n     * @returns {number|void}\n     */\n    get (_, propName) {\n        if (propName === MessageProperty.POSITION) {\n            return this.playback.getPosition() || 0;\n        }\n    }\n\n    /**\n     * Native application wants to Set a property\n     * in the client.\n     *\n     * @param {string} _ - org.mpris.MediaPlayer2.Player\n     * @param {MessageProperty} propName - property to set\n     * @param {number|LoopStatus|boolean} [newValue] - depends on the property to set\n     */\n    set (_, propName, newValue) {\n        switch (propName) {\n            case MessageProperty.RATE:\n                this.playback.setRate(Number(newValue));\n                break;\n\n            case MessageProperty.VOLUME:\n                this.playback.setVolume(Number(newValue));\n                break;\n\n            case MessageProperty.SHUFFLE:\n                this.playback.setShuffle(Boolean(newValue));\n                break;\n\n            case MessageProperty.LOOP_STATUS:\n                this.playback.setLoopStatus(Object.values(LoopStatus).find(e => e === newValue));\n                break;\n\n            case MessageProperty.FULL_SCREEN:\n                this.playback.toggleFullScreen();\n                break;\n        }\n    }\n\n    /**\n     * Native application wants to run a command on playback\n     *\n     * @param {MessageMethod} name\n     */\n    command (name) {\n        switch (name) {\n            case MessageMethod.PLAY:\n                this.playback.play();\n                break;\n            case MessageMethod.PAUSE:\n                this.playback.pause();\n                break;\n            case MessageMethod.TOGGLE:\n                this.playback.togglePlayback();\n                break;\n            case MessageMethod.STOP:\n                this.playback.stop();\n                break;\n            case MessageMethod.NEXT:\n                this.playback.next();\n                break;\n            case MessageMethod.PREVIOUS:\n                this.playback.previous();\n                break;\n            case MessageMethod.SEEK:\n                this.playback.seek(arguments[1]);\n                break;\n            case MessageMethod.SET_POSITION: //why is this not in set?\n                this.playback.setPosition(arguments[1], arguments[2]);\n                break;\n        }\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/Lt-Mayonesa/browser-mpris2/src/browser/main/host.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 83,
    "kind": "class",
    "name": "Host",
    "memberof": "src/browser/main/host.js",
    "static": true,
    "longname": "src/browser/main/host.js~Host",
    "access": "public",
    "export": false,
    "importPath": "browser-mpris2/src/browser/main/host.js",
    "importStyle": null,
    "description": "\nA class in charge of communicating back and forth with the native app.\n\nThere should be no need to modify/extend this class\nas it uses {@link Playback} to build the messages to send\nand as the receiver of all messages from the MPRIS2 interfase",
    "lineNumber": 10,
    "interface": false
  },
  {
    "__docId__": 84,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/browser/main/host.js~Host",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/host.js~Host#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "Playback"
        ],
        "spread": false,
        "optional": false,
        "name": "playback",
        "description": "the playback of the current site"
      },
      {
        "nullable": null,
        "types": [
          "Carrier"
        ],
        "spread": false,
        "optional": false,
        "name": "carrier",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "port",
        "description": "see {@link https://developer.chrome.com/apps/runtime#type-Port}"
      }
    ]
  },
  {
    "__docId__": 85,
    "kind": "member",
    "name": "playback",
    "memberof": "src/browser/main/host.js~Host",
    "static": false,
    "longname": "src/browser/main/host.js~Host#playback",
    "access": "public",
    "description": "The playback to interact with",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "Playback"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 86,
    "kind": "member",
    "name": "carrier",
    "memberof": "src/browser/main/host.js~Host",
    "static": false,
    "longname": "src/browser/main/host.js~Host#carrier",
    "access": "public",
    "description": "A carrier for caching and building the payloads",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "Carrier"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 87,
    "kind": "member",
    "name": "port",
    "memberof": "src/browser/main/host.js~Host",
    "static": false,
    "longname": "src/browser/main/host.js~Host#port",
    "access": "public",
    "description": "A chrome.runtime.Port",
    "see": [
      "https://developer.chrome.com/apps/runtime#type-Port"
    ],
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 88,
    "kind": "member",
    "name": "source",
    "memberof": "src/browser/main/host.js~Host",
    "static": false,
    "longname": "src/browser/main/host.js~Host#source",
    "access": "public",
    "description": "The default Payload.Identity for the MPRIS2 Interface",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "sendMessage",
    "memberof": "src/browser/main/host.js~Host",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/host.js~Host#sendMessage",
    "access": "public",
    "description": "Send a message to host app",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "MessageType"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object",
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "payload",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "change",
    "memberof": "src/browser/main/host.js~Host",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/host.js~Host#change",
    "access": "public",
    "description": "Send a change message to host app",
    "lineNumber": 61,
    "params": [],
    "return": null
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "start",
    "memberof": "src/browser/main/host.js~Host",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/host.js~Host#start",
    "access": "public",
    "description": "Set player as active player and send data to native app",
    "lineNumber": 77,
    "params": [
      {
        "nullable": null,
        "types": [
          "Player"
        ],
        "spread": false,
        "optional": false,
        "name": "player",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "return",
    "memberof": "src/browser/main/host.js~Host",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/host.js~Host#return",
    "access": "public",
    "description": "",
    "lineNumber": 87,
    "params": [
      {
        "nullable": null,
        "types": [
          "MessageMethod"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "seeked",
    "memberof": "src/browser/main/host.js~Host",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/host.js~Host#seeked",
    "access": "public",
    "description": "Send a seeked message to host",
    "lineNumber": 100,
    "params": [
      {
        "nullable": null,
        "types": [
          "Player"
        ],
        "spread": false,
        "optional": false,
        "name": "player",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "quit",
    "memberof": "src/browser/main/host.js~Host",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/host.js~Host#quit",
    "access": "public",
    "description": "Send a quit message to host",
    "lineNumber": 110,
    "params": [],
    "return": null
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "messageListener",
    "memberof": "src/browser/main/host.js~Host",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/host.js~Host#messageListener",
    "access": "public",
    "description": "Listener for messages from native application (aka: mpris interface)",
    "lineNumber": 124,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "request",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "MessageMethod"
        ],
        "spread": false,
        "optional": false,
        "name": "request.method",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "request.args",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "get",
    "memberof": "src/browser/main/host.js~Host",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/host.js~Host#get",
    "access": "public",
    "description": "Native application wants to Get a property from client",
    "lineNumber": 143,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number|void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "_",
        "description": "org.mpris.MediaPlayer2.Player"
      },
      {
        "nullable": null,
        "types": [
          "MessageProperty"
        ],
        "spread": false,
        "optional": false,
        "name": "propName",
        "description": "property that should be returned"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number",
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "set",
    "memberof": "src/browser/main/host.js~Host",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/host.js~Host#set",
    "access": "public",
    "description": "Native application wants to Set a property\nin the client.",
    "lineNumber": 157,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "_",
        "description": "org.mpris.MediaPlayer2.Player"
      },
      {
        "nullable": null,
        "types": [
          "MessageProperty"
        ],
        "spread": false,
        "optional": false,
        "name": "propName",
        "description": "property to set"
      },
      {
        "nullable": null,
        "types": [
          "number",
          "LoopStatus",
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "newValue",
        "description": "depends on the property to set"
      }
    ],
    "return": null
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "command",
    "memberof": "src/browser/main/host.js~Host",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/host.js~Host#command",
    "access": "public",
    "description": "Native application wants to run a command on playback",
    "lineNumber": 186,
    "params": [
      {
        "nullable": null,
        "types": [
          "MessageMethod"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 99,
    "kind": "file",
    "name": "src/browser/main/page.js",
    "content": "/**\n * A class in charge of detecting new {@link HTMLMediaElement}s in current page\n * and registering them as players.\n *\n * The expected usage is call {@link checkForMediaElements} and {@link observeForMedia}\n * upon window.load event.\n */\nclass Page {\n    /**\n     *\n     *\n     * @param {Document} document\n     * @param {Playback} playback\n     * @param {Host} host\n     */\n    constructor (document, playback, host) {\n        /**\n         * The current document to keep as context\n         * @type {Document}\n         */\n        this.document = document;\n\n        /**\n         * Current {@link Playback} on the page\n         * @type {Playback}\n         */\n        this.playback = playback;\n\n        /**\n         * Current {@link Host} to trigger changes\n         * @type {Host}\n         */\n        this.host = host;\n\n        /**\n         * An array holding all {@link Player}s present in the page\n         *\n         * @type {Array.<Player>}\n         */\n        this.players = [];\n\n        /**\n         * Upon load of a page this property can be used by providers\n         * to cache html elements that are likely to be used repeatedly.\n         *\n         * @see src/browser/providers/soundcloud.js - for an example.\n         *\n         * @type {Object.<string, HTMLElement>}\n         */\n        this.elements = {};\n\n        /**\n         * An observer for added media elements\n         * use {@link observeForMedia} to observer elements\n         *\n         * @type {MutationObserver}\n         * @private\n         */\n        this._mediaObserver = new MutationObserver(m => this.onMutate(m));\n\n        /**\n         * An observer to trigger change events on the host\n         * use {@link observeForChanges} to add elements\n         *\n         * @type {MutationObserver}\n         * @private\n         */\n        this._changesObserver = new MutationObserver(() => this.host.change());\n    }\n\n    /**\n     * Take the element and add it to the list of players\n     * if it's not already there\n     *\n     * Use when detecting a new element on the DOM\n     *\n     * If the element is playing it will be set as the active player.\n     *\n     * @param element\n     * @return {boolean}\n     */\n    registerPlayer (element) {\n        if (this.players.find(player => player.element === element)) {\n            return false;\n        }\n\n        let player = new Player(this, this.host, element);\n\n        this.players.push(player);\n\n        // Ignore short sounds, they are most likely a chat notification sound\n        // but still allow when undetermined (e.g. video stream)\n        if (player.isPlaying()) {\n            this.setActivePlayer(player);\n        }\n        return true;\n    }\n\n    /**\n     * Set element to be observed by {@link this._mediaObserver}\n     *\n     * @param {Element} element\n     */\n    observeForMedia (element) {\n        this._mediaObserver.observe(element, {\n            childList: true,\n            subtree: true\n        });\n    }\n\n    /**\n     * Set element to be observed by {@link this._changesObserver}\n     * by default check for any changes to itself or it's children\n     *\n     * @param {Element} element\n     * @param {MutationObserverInit} options\n     */\n    observeForChanges (element, options = { childList: true, subtree: true }) {\n        this._changesObserver.observe(element, options);\n    }\n\n    /**\n     * Callback called by {@link this._mediaObserver}\n     * Given an array of mutations check if there where any added nodes that are media\n     *\n     * @param {Array<MutationRecord>} mutations\n     */\n    onMutate (mutations) {\n        mutations.forEach(mutation => {\n            mutation.addedNodes.forEach(node => {\n                if (typeof node.matches !== 'function' || typeof node.querySelectorAll !== 'function') {\n                    return;\n                }\n\n                // first check whether the node itself is audio/video\n                if (node.matches('video,audio')) {\n                    this.registerPlayer(node);\n                    return;\n                }\n\n                // if not, check whether any of its children are\n                node.querySelectorAll('video,audio')\n                  .forEach(player => this.registerPlayer(player));\n            });\n        });\n    }\n\n    /**\n     * Search DOM for any &lt;video&gt; or &lt;audio&gt; elements\n     */\n    checkForMediaElements () {\n        this.document.querySelectorAll('video,audio')\n          .forEach(player => this.registerPlayer(player));\n    }\n\n    /**\n     * Set the playback's active player\n     *\n     * @param {Player} player\n     */\n    setActivePlayer (player) {\n        this.host.start(player);\n    }\n\n    /**\n     * Get the playbacks active player\n     *\n     * @returns {Player}\n     */\n    getActivePlayer () {\n        return this.playback.activePlayer;\n    }\n\n    /**\n     * Get the page's title\n     *\n     * @returns {null|string}\n     */\n    getTitle () {\n        return this.document.title;\n    }\n\n    /**\n     * Get the page's favicon\n     *\n     * @returns {string}\n     */\n    getIcon () {\n        return this.document\n          .querySelector('link[rel=\"shortcut icon\"],link[rel=\"icon\"]')\n          .getAttribute('href');\n    }\n\n}\n",
    "static": true,
    "longname": "/home/travis/build/Lt-Mayonesa/browser-mpris2/src/browser/main/page.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 100,
    "kind": "class",
    "name": "Page",
    "memberof": "src/browser/main/page.js",
    "static": true,
    "longname": "src/browser/main/page.js~Page",
    "access": "public",
    "export": false,
    "importPath": "browser-mpris2/src/browser/main/page.js",
    "importStyle": null,
    "description": "A class in charge of detecting new {@link HTMLMediaElement}s in current page\nand registering them as players.\n\nThe expected usage is call {@link checkForMediaElements} and {@link observeForMedia}\nupon window.load event.",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 101,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/browser/main/page.js~Page",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/page.js~Page#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "Document"
        ],
        "spread": false,
        "optional": false,
        "name": "document",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Playback"
        ],
        "spread": false,
        "optional": false,
        "name": "playback",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Host"
        ],
        "spread": false,
        "optional": false,
        "name": "host",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 102,
    "kind": "member",
    "name": "document",
    "memberof": "src/browser/main/page.js~Page",
    "static": false,
    "longname": "src/browser/main/page.js~Page#document",
    "access": "public",
    "description": "The current document to keep as context",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "Document"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 103,
    "kind": "member",
    "name": "playback",
    "memberof": "src/browser/main/page.js~Page",
    "static": false,
    "longname": "src/browser/main/page.js~Page#playback",
    "access": "public",
    "description": "Current {@link Playback} on the page",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "Playback"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 104,
    "kind": "member",
    "name": "host",
    "memberof": "src/browser/main/page.js~Page",
    "static": false,
    "longname": "src/browser/main/page.js~Page#host",
    "access": "public",
    "description": "Current {@link Host} to trigger changes",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "Host"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 105,
    "kind": "member",
    "name": "players",
    "memberof": "src/browser/main/page.js~Page",
    "static": false,
    "longname": "src/browser/main/page.js~Page#players",
    "access": "public",
    "description": "An array holding all {@link Player}s present in the page",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "Array.<Player>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 106,
    "kind": "member",
    "name": "elements",
    "memberof": "src/browser/main/page.js~Page",
    "static": false,
    "longname": "src/browser/main/page.js~Page#elements",
    "access": "public",
    "description": "Upon load of a page this property can be used by providers\nto cache html elements that are likely to be used repeatedly.",
    "see": [
      "src/browser/providers/soundcloud.js - for an example."
    ],
    "lineNumber": 50,
    "type": {
      "nullable": null,
      "types": [
        "Object.<string, HTMLElement>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 107,
    "kind": "member",
    "name": "_mediaObserver",
    "memberof": "src/browser/main/page.js~Page",
    "static": false,
    "longname": "src/browser/main/page.js~Page#_mediaObserver",
    "access": "private",
    "description": "An observer for added media elements\nuse {@link observeForMedia} to observer elements",
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "MutationObserver"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 108,
    "kind": "member",
    "name": "_changesObserver",
    "memberof": "src/browser/main/page.js~Page",
    "static": false,
    "longname": "src/browser/main/page.js~Page#_changesObserver",
    "access": "private",
    "description": "An observer to trigger change events on the host\nuse {@link observeForChanges} to add elements",
    "lineNumber": 68,
    "type": {
      "nullable": null,
      "types": [
        "MutationObserver"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "registerPlayer",
    "memberof": "src/browser/main/page.js~Page",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/page.js~Page#registerPlayer",
    "access": "public",
    "description": "Take the element and add it to the list of players\nif it's not already there\n\nUse when detecting a new element on the DOM\n\nIf the element is playing it will be set as the active player.",
    "lineNumber": 82,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "observeForMedia",
    "memberof": "src/browser/main/page.js~Page",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/page.js~Page#observeForMedia",
    "access": "public",
    "description": "Set element to be observed by {@link this._mediaObserver}",
    "lineNumber": 104,
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "observeForChanges",
    "memberof": "src/browser/main/page.js~Page",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/page.js~Page#observeForChanges",
    "access": "public",
    "description": "Set element to be observed by {@link this._changesObserver}\nby default check for any changes to itself or it's children",
    "lineNumber": 118,
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "MutationObserverInit"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "onMutate",
    "memberof": "src/browser/main/page.js~Page",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/page.js~Page#onMutate",
    "access": "public",
    "description": "Callback called by {@link this._mediaObserver}\nGiven an array of mutations check if there where any added nodes that are media",
    "lineNumber": 128,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<MutationRecord>"
        ],
        "spread": false,
        "optional": false,
        "name": "mutations",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "checkForMediaElements",
    "memberof": "src/browser/main/page.js~Page",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/page.js~Page#checkForMediaElements",
    "access": "public",
    "description": "Search DOM for any &lt;video&gt; or &lt;audio&gt; elements",
    "lineNumber": 151,
    "params": [],
    "return": null
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "setActivePlayer",
    "memberof": "src/browser/main/page.js~Page",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/page.js~Page#setActivePlayer",
    "access": "public",
    "description": "Set the playback's active player",
    "lineNumber": 161,
    "params": [
      {
        "nullable": null,
        "types": [
          "Player"
        ],
        "spread": false,
        "optional": false,
        "name": "player",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "getActivePlayer",
    "memberof": "src/browser/main/page.js~Page",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/page.js~Page#getActivePlayer",
    "access": "public",
    "description": "Get the playbacks active player",
    "lineNumber": 170,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Player}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Player"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "getTitle",
    "memberof": "src/browser/main/page.js~Page",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/page.js~Page#getTitle",
    "access": "public",
    "description": "Get the page's title",
    "lineNumber": 179,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{null|string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "null",
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "getIcon",
    "memberof": "src/browser/main/page.js~Page",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/page.js~Page#getIcon",
    "access": "public",
    "description": "Get the page's favicon",
    "lineNumber": 188,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 118,
    "kind": "file",
    "name": "src/browser/main/playback.js",
    "content": "/**\n * There should be one instance of Playback per page\n *\n * This class is in charge of handling the playback of the active player\n * it receives the commands from its {@link Host} and communicates the accordingly\n * to the player.\n *\n * It's also the responsible for exposing all the getters necessary\n * to conform the {@link Payload} message.\n *\n * By default all properties of {@link Payload} are extracted from the {@link this.activePlayer}\n * although it is expected that this functionality is overridden by the providers.\n */\nclass Playback {\n    /**\n     * Create a new instance\n     */\n    constructor () {\n        /**\n         * A dictionary of any controls extracted from the DOM\n         * @type {Object.<string, HTMLElement>}\n         */\n        this.controls = {};\n\n        /**\n         * The current player being shown by the MPRIS2 interface\n         *\n         * @type {Player}\n         */\n        this.activePlayer = null;\n    }\n\n    /**\n     * One of {@link PlaybackStatus.PLAYING} or {@link PlaybackStatus.PAUSED}\n     * @returns {string}\n     */\n    getStatus () {\n        return this.activePlayer && this.activePlayer.isPlaying() ? PlaybackStatus.PLAYING : PlaybackStatus.PAUSED;\n    }\n\n    /**\n     * Set the volume of playback\n     * @param {number} volume\n     */\n    setVolume (volume) {\n        this.activePlayer && this.activePlayer.setVolume(volume);\n    }\n\n    /**\n     * Get the volume of playback\n     * @returns {null|number}\n     */\n    getVolume () {\n        return this.activePlayer && this.activePlayer.getVolume();\n    }\n\n    /**\n     * Set the rate of playback.\n     * @example\n     * playback.setRate(1.5);\n     * @param {number} rate\n     */\n    setRate (rate) {\n        this.activePlayer && this.activePlayer.setRate(rate);\n    }\n\n    /**\n     * Get the rate of playback\n     * @returns {null|number}\n     */\n    getRate () {\n        return this.activePlayer && this.activePlayer.getRate();\n    }\n\n    /**\n     * Set the shuffle between tracks of playback\n     * @param {boolean} isShuffle\n     */\n    setShuffle (isShuffle) {}\n\n    /**\n     * Get if the playback is shuffling between tracks\n     * @return {boolean}\n     */\n    isShuffle () {\n        return false;\n    }\n\n    /**\n     * By default we don't support playlist looping ({@link LoopStatus}.PLAYLIST)\n     * so we force {@link LoopStatus}.TRACK loop if any loop other than {@link LoopStatus}.NONE is specified\n     *\n     * @param {LoopStatus} status\n     */\n    setLoopStatus (status) {\n        let loopStatus = status === LoopStatus.PLAYLIST ? LoopStatus.TRACK : status;\n        this.activePlayer && this.activePlayer.setLoop(loopStatus === LoopStatus.TRACK);\n    }\n\n    /**\n     * Get the loop status of playback\n     * @returns {LoopStatus}\n     */\n    getLoopStatus () {\n        return this.activePlayer && this.activePlayer.isLooping() ?\n          LoopStatus.TRACK : LoopStatus.NONE;\n    }\n\n    /**\n     * Check current page for 'next' functionality\n     *\n     * @returns {boolean}\n     */\n    canGoNext () {\n        return false;\n    }\n\n    /**\n     * Check current page for 'previous' functionality\n     *\n     * @returns {boolean}\n     */\n    canGoPrevious () {\n        return false;\n    }\n\n    /**\n     * Go to next media\n     * This should be implemented per provider\n     */\n    next () {}\n\n    /**\n     * Go to previous\n     * This should be implemented per provider\n     */\n    previous () {}\n\n    /**\n     * **COMMAND** Start to play active player\n     */\n    play () {\n        this.activePlayer && this.activePlayer.play();\n    }\n\n    /**\n     * **COMMAND** Pause active player\n     */\n    pause () {\n        this.activePlayer && this.activePlayer.pause();\n    }\n\n    /**\n     * **COMMAND** Toggle between play and pause\n     */\n    togglePlayback () {\n        this.activePlayer && this.activePlayer.playPause();\n    }\n\n    /**\n     * **COMMAND** Stop active player\n     */\n    stop () {\n        this.activePlayer && this.activePlayer.stop();\n    }\n\n    /**\n     * **COMMAND** Seek activePlayer to offset\n     *\n     * @param {number} offset\n     */\n    seek (offset) {\n        this.activePlayer && this.activePlayer.seek(offset);\n    }\n\n    /**\n     * **COMMAND** Set current position of active player\n     *\n     * @param {string} id - the id of the player\n     * @param {number} position\n     */\n    setPosition (id, position) {\n        this.activePlayer && this.activePlayer.setPosition(position);\n    }\n\n    /**\n     * **COMMAND** Get active player's position\n     *\n     * @returns {null|number}\n     */\n    getPosition () {\n        return this.activePlayer !== null ? this.activePlayer.getPosition() : null;\n    }\n\n    /**\n     * Set the current active player\n     *\n     * @param {Player} player\n     */\n    setActivePlayer (player) {\n        if (player.isValid()) {\n            this.activePlayer = player;\n        }\n    }\n\n    /**\n     * **COMMAND** Toggle the fullscreen state\n     *\n     * @todo test this works\n     */\n    toggleFullScreen () {\n        this.activePlayer && this.activePlayer.toggleFullScreen();\n    }\n\n    /**\n     * Get the identity of playback, by default it is the site's domain\n     *\n     * @returns {null|string}\n     */\n    getIdentity () {\n        return this.activePlayer && this.activePlayer.getSiteDomain();\n    }\n\n}\n",
    "static": true,
    "longname": "/home/travis/build/Lt-Mayonesa/browser-mpris2/src/browser/main/playback.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 119,
    "kind": "class",
    "name": "Playback",
    "memberof": "src/browser/main/playback.js",
    "static": true,
    "longname": "src/browser/main/playback.js~Playback",
    "access": "public",
    "export": false,
    "importPath": "browser-mpris2/src/browser/main/playback.js",
    "importStyle": null,
    "description": "There should be one instance of Playback per page\n\nThis class is in charge of handling the playback of the active player\nit receives the commands from its {@link Host} and communicates the accordingly\nto the player.\n\nIt's also the responsible for exposing all the getters necessary\nto conform the {@link Payload} message.\n\nBy default all properties of {@link Payload} are extracted from the {@link this.activePlayer}\nalthough it is expected that this functionality is overridden by the providers.",
    "lineNumber": 14,
    "interface": false
  },
  {
    "__docId__": 120,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/browser/main/playback.js~Playback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/playback.js~Playback#constructor",
    "access": "public",
    "description": "Create a new instance",
    "lineNumber": 18
  },
  {
    "__docId__": 121,
    "kind": "member",
    "name": "controls",
    "memberof": "src/browser/main/playback.js~Playback",
    "static": false,
    "longname": "src/browser/main/playback.js~Playback#controls",
    "access": "public",
    "description": "A dictionary of any controls extracted from the DOM",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "Object.<string, HTMLElement>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 122,
    "kind": "member",
    "name": "activePlayer",
    "memberof": "src/browser/main/playback.js~Playback",
    "static": false,
    "longname": "src/browser/main/playback.js~Playback#activePlayer",
    "access": "public",
    "description": "The current player being shown by the MPRIS2 interface",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "Player"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "getStatus",
    "memberof": "src/browser/main/playback.js~Playback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/playback.js~Playback#getStatus",
    "access": "public",
    "description": "One of {@link PlaybackStatus.PLAYING} or {@link PlaybackStatus.PAUSED}",
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "setVolume",
    "memberof": "src/browser/main/playback.js~Playback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/playback.js~Playback#setVolume",
    "access": "public",
    "description": "Set the volume of playback",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "volume",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "getVolume",
    "memberof": "src/browser/main/playback.js~Playback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/playback.js~Playback#getVolume",
    "access": "public",
    "description": "Get the volume of playback",
    "lineNumber": 53,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{null|number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "null",
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "setRate",
    "memberof": "src/browser/main/playback.js~Playback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/playback.js~Playback#setRate",
    "access": "public",
    "description": "Set the rate of playback.",
    "examples": [
      "playback.setRate(1.5);"
    ],
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "rate",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "getRate",
    "memberof": "src/browser/main/playback.js~Playback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/playback.js~Playback#getRate",
    "access": "public",
    "description": "Get the rate of playback",
    "lineNumber": 71,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{null|number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "null",
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "setShuffle",
    "memberof": "src/browser/main/playback.js~Playback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/playback.js~Playback#setShuffle",
    "access": "public",
    "description": "Set the shuffle between tracks of playback",
    "lineNumber": 79,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isShuffle",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "isShuffle",
    "memberof": "src/browser/main/playback.js~Playback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/playback.js~Playback#isShuffle",
    "access": "public",
    "description": "Get if the playback is shuffling between tracks",
    "lineNumber": 85,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 132,
    "kind": "method",
    "name": "setLoopStatus",
    "memberof": "src/browser/main/playback.js~Playback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/playback.js~Playback#setLoopStatus",
    "access": "public",
    "description": "By default we don't support playlist looping ({@link LoopStatus}.PLAYLIST)\nso we force {@link LoopStatus}.TRACK loop if any loop other than {@link LoopStatus}.NONE is specified",
    "lineNumber": 95,
    "params": [
      {
        "nullable": null,
        "types": [
          "LoopStatus"
        ],
        "spread": false,
        "optional": false,
        "name": "status",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "getLoopStatus",
    "memberof": "src/browser/main/playback.js~Playback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/playback.js~Playback#getLoopStatus",
    "access": "public",
    "description": "Get the loop status of playback",
    "lineNumber": 104,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{LoopStatus}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "LoopStatus"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "canGoNext",
    "memberof": "src/browser/main/playback.js~Playback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/playback.js~Playback#canGoNext",
    "access": "public",
    "description": "Check current page for 'next' functionality",
    "lineNumber": 114,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "canGoPrevious",
    "memberof": "src/browser/main/playback.js~Playback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/playback.js~Playback#canGoPrevious",
    "access": "public",
    "description": "Check current page for 'previous' functionality",
    "lineNumber": 123,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "next",
    "memberof": "src/browser/main/playback.js~Playback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/playback.js~Playback#next",
    "access": "public",
    "description": "Go to next media\nThis should be implemented per provider",
    "lineNumber": 131,
    "params": [],
    "return": null
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "previous",
    "memberof": "src/browser/main/playback.js~Playback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/playback.js~Playback#previous",
    "access": "public",
    "description": "Go to previous\nThis should be implemented per provider",
    "lineNumber": 137,
    "params": [],
    "return": null
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "play",
    "memberof": "src/browser/main/playback.js~Playback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/playback.js~Playback#play",
    "access": "public",
    "description": "**COMMAND** Start to play active player",
    "lineNumber": 142,
    "params": [],
    "return": null
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "pause",
    "memberof": "src/browser/main/playback.js~Playback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/playback.js~Playback#pause",
    "access": "public",
    "description": "**COMMAND** Pause active player",
    "lineNumber": 149,
    "params": [],
    "return": null
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "togglePlayback",
    "memberof": "src/browser/main/playback.js~Playback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/playback.js~Playback#togglePlayback",
    "access": "public",
    "description": "**COMMAND** Toggle between play and pause",
    "lineNumber": 156,
    "params": [],
    "return": null
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "stop",
    "memberof": "src/browser/main/playback.js~Playback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/playback.js~Playback#stop",
    "access": "public",
    "description": "**COMMAND** Stop active player",
    "lineNumber": 163,
    "params": [],
    "return": null
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "seek",
    "memberof": "src/browser/main/playback.js~Playback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/playback.js~Playback#seek",
    "access": "public",
    "description": "**COMMAND** Seek activePlayer to offset",
    "lineNumber": 172,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "offset",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "setPosition",
    "memberof": "src/browser/main/playback.js~Playback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/playback.js~Playback#setPosition",
    "access": "public",
    "description": "**COMMAND** Set current position of active player",
    "lineNumber": 182,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "the id of the player"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "getPosition",
    "memberof": "src/browser/main/playback.js~Playback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/playback.js~Playback#getPosition",
    "access": "public",
    "description": "**COMMAND** Get active player's position",
    "lineNumber": 191,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{null|number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "null",
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "setActivePlayer",
    "memberof": "src/browser/main/playback.js~Playback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/playback.js~Playback#setActivePlayer",
    "access": "public",
    "description": "Set the current active player",
    "lineNumber": 200,
    "params": [
      {
        "nullable": null,
        "types": [
          "Player"
        ],
        "spread": false,
        "optional": false,
        "name": "player",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "toggleFullScreen",
    "memberof": "src/browser/main/playback.js~Playback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/playback.js~Playback#toggleFullScreen",
    "access": "public",
    "description": "**COMMAND** Toggle the fullscreen state",
    "lineNumber": 211,
    "todo": [
      "test this works"
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "getIdentity",
    "memberof": "src/browser/main/playback.js~Playback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/playback.js~Playback#getIdentity",
    "access": "public",
    "description": "Get the identity of playback, by default it is the site's domain",
    "lineNumber": 220,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{null|string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "null",
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 157,
    "kind": "file",
    "name": "src/browser/main/player.js",
    "content": "/**\n * A class that wraps around HTMLMediaElement\n *\n * It sends to the {@link Host} all relevant media events (ie: play, pause, etc)\n *\n * This class should be extended in order to give **provider** specific support.\n * By default all getter and setters interact with the media element, this can be overwritten\n * by extending this class so it gets and sets by interacting with the relevant places for each **provider**.\n */\nclass Player {\n    /**\n     * Create a new instance of player\n     * @param {Page} page\n     * @param {Host} host\n     * @param {HTMLMediaElement} element\n     */\n    constructor (page, host, element) {\n        /**\n         * The {@link Page} that holds the player\n         * @type {Page}\n         */\n        this.page = page;\n        /**\n         * The {@link Host} to communicate with\n         * @type {Host}\n         */\n        this.host = host;\n        /**\n         * The media element\n         * @type {HTMLMediaElement}\n         */\n        this.element = element;\n        /**\n         * A URL with the media baseURI\n         * It's updated in {@link refresh} whenever metadata changes\n         * @type {Object}\n         */\n        this.URL = new URL(element.baseURI || '');\n        this.initDefaultMediaListeners();\n    }\n\n    /**\n     * Add listeners on this.element so we propagate all necessary\n     * events to the this.host\n     */\n    initDefaultMediaListeners () {\n        this.element.addEventListener('play', () => this.refresh());\n        this.element.addEventListener('durationchange', () => this.refresh());\n        this.element.addEventListener('loadedmetadata', () => this.refresh());\n        this.element.addEventListener('loadstart', () => this.refresh());\n    }\n\n    /**\n     * Update this.URL so getter read the correct data.\n     * Also trigger a {@link this.host.start} event on the {@link Host}.\n     */\n    refresh () {\n        this.URL = new URL(this.element.baseURI || '');\n        if (this.isValid()) {\n            this.element.addEventListener('pause', () => this.host.change());\n            this.element.addEventListener('playing', () => this.host.change());\n            this.element.addEventListener('ratechange', () => this.host.change());\n            this.element.addEventListener('seeked', () => this.host.seeked(this));\n            this.element.addEventListener('volumechange', () => this.host.change());\n            this.host.start(this);\n        }\n    }\n\n    /**\n     * Get the id of the player\n     * @returns {null|string} the elements source\n     */\n    getId () {\n        return this.element.baseURI;\n    }\n\n    /**\n     * Returns true if the media is not paused\n     *\n     * @returns {boolean}\n     */\n    isPlaying () {\n        return !this.element.paused;\n    }\n\n    /**\n     * Returns true if the media is paused.\n     *\n     * @return {boolean}\n     */\n    isPaused () {\n        return this.element.paused && this.element.currentTime > 0;\n    }\n\n    /**\n     * Return true if the media is paused and current time is 0.\n     *\n     * @return {boolean}\n     */\n    isStopped () {\n        return this.element.paused && this.element.currentTime === 0;\n    }\n\n    /**\n     * Length is expected in microseconds by host\n     *\n     * @returns {number}\n     */\n    getLength () {\n        return Math.trunc(this.element.duration * 1e6);\n    }\n\n    /**\n     * Set the volume of the media\n     * @param {number} volume\n     */\n    setVolume (volume) {\n        this.element.volume = volume;\n    }\n\n    /**\n     * If media is muted return 0\n     *\n     * @returns {number}\n     */\n    getVolume () {\n        return this.element.muted ? 0.0 : this.element.volume;\n    }\n\n    /**\n     * Is the media muted?\n     *\n     * @return {boolean}\n     */\n    isMuted () {\n        return this.element.muted;\n    }\n\n    /**\n     * Set the playback rate\n     * @param {number} rate\n     */\n    setRate (rate) {\n        this.element.playbackRate = rate;\n    }\n\n    /**\n     * Get the playback rate\n     * @returns {number}\n     */\n    getRate () {\n        return this.element.playbackRate;\n    }\n\n    /**\n     * Get the title of the player. The page's title by default.\n     *\n     * @returns {null|string}\n     */\n    getTitle () {\n        return this.page.getTitle();\n    }\n\n    /**\n     * Get the artists of the player\n     *\n     * @returns {Array<string>}\n     */\n    getArtists () {\n        return [this.URL.host];\n    }\n\n    /**\n     * Get the cover of the player.\n     *\n     * Using logo.clearbit.com API seems to work quite nicely.\n     * The other alternative is to get the logo from the page's favicon ({@link this.page.getIcon()})\n     *\n     * @returns {string}\n     */\n    getCover () {\n        return `http://logo.clearbit.com/${this.URL.host}`;\n    }\n\n    /**\n     * Get the current time of the media\n     *\n     * @returns {number} media current time\n     */\n    getPosition () {\n        return Math.trunc(this.element.currentTime * 1e6);\n    }\n\n    /**\n     * Is the media looping?\n     * @returns {boolean}\n     */\n    isLooping () {\n        return this.element.loop;\n    }\n\n    /**\n     * Should media loop when it reaches the end.\n     *\n     * @param {boolean} loop\n     */\n    setLoop (loop) {\n        this.element.loop = loop;\n    }\n\n    /**\n     * Play media element\n     */\n    play () {\n        return this.element.play();\n    }\n\n    /**\n     * Pause media element\n     */\n    pause () {\n        this.element.pause();\n    }\n\n    /**\n     * If media is playing then pause\n     * else play it\n     */\n    playPause () {\n        if (this.isPlaying())\n            this.pause();\n        else\n            this.play();\n    }\n\n    /**\n     * Pause media and set position to 0\n     */\n    stop () {\n        this.pause();\n        this.setPosition(0);\n    }\n\n    /**\n     * seek by an offset to position\n     *\n     * @param {number} offset - offset to currentTime in microseconds\n     */\n    seek (offset) {\n        this.element.currentTime += offset / 1e6;\n    }\n\n    /**\n     * Set the position of playback\n     * @param {number} position - new currentTime in microseconds\n     */\n    setPosition (position) {\n        this.element.currentTime = position / 1e6;\n    }\n\n    /**\n     * Toogle the fullscreen state of the media.\n     * @todo test this works\n     */\n    toggleFullScreen () {\n        if (this.element.mozRequestFullScreen) {\n            this.element.mozRequestFullScreen();\n        } else if (this.element.webkitRequestFullScreen) {\n            this.element.webkitRequestFullScreen();\n        }\n    }\n\n    /**\n     * Get the site domain (host)\n     * @returns {string}\n     */\n    getSiteDomain () {\n        return this.URL.host;\n    }\n\n    /**\n     * Get the elements url\n     * @returns {null|string}\n     */\n    getUrl () {\n        return this.element.baseURI;\n    }\n\n    /**\n     * Check if element is visible to the user\n     *\n     * @returns {boolean}\n     */\n    isHidden () {\n        return this.element.offsetParent === null;\n    }\n\n    /**\n     *\n     * @return {boolean}\n     */\n    isValid () {\n        return !isNaN(this.element.duration) && this.element.duration > 5;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/Lt-Mayonesa/browser-mpris2/src/browser/main/player.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 158,
    "kind": "class",
    "name": "Player",
    "memberof": "src/browser/main/player.js",
    "static": true,
    "longname": "src/browser/main/player.js~Player",
    "access": "public",
    "export": false,
    "importPath": "browser-mpris2/src/browser/main/player.js",
    "importStyle": null,
    "description": "A class that wraps around HTMLMediaElement\n\nIt sends to the {@link Host} all relevant media events (ie: play, pause, etc)\n\nThis class should be extended in order to give **provider** specific support.\nBy default all getter and setters interact with the media element, this can be overwritten\nby extending this class so it gets and sets by interacting with the relevant places for each **provider**.",
    "lineNumber": 10,
    "interface": false
  },
  {
    "__docId__": 159,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/browser/main/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/player.js~Player#constructor",
    "access": "public",
    "description": "Create a new instance of player",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "Page"
        ],
        "spread": false,
        "optional": false,
        "name": "page",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Host"
        ],
        "spread": false,
        "optional": false,
        "name": "host",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "HTMLMediaElement"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 160,
    "kind": "member",
    "name": "page",
    "memberof": "src/browser/main/player.js~Player",
    "static": false,
    "longname": "src/browser/main/player.js~Player#page",
    "access": "public",
    "description": "The {@link Page} that holds the player",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "Page"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 161,
    "kind": "member",
    "name": "host",
    "memberof": "src/browser/main/player.js~Player",
    "static": false,
    "longname": "src/browser/main/player.js~Player#host",
    "access": "public",
    "description": "The {@link Host} to communicate with",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "Host"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 162,
    "kind": "member",
    "name": "element",
    "memberof": "src/browser/main/player.js~Player",
    "static": false,
    "longname": "src/browser/main/player.js~Player#element",
    "access": "public",
    "description": "The media element",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "HTMLMediaElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 163,
    "kind": "member",
    "name": "URL",
    "memberof": "src/browser/main/player.js~Player",
    "static": false,
    "longname": "src/browser/main/player.js~Player#URL",
    "access": "public",
    "description": "A URL with the media baseURI\nIt's updated in {@link refresh} whenever metadata changes",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 164,
    "kind": "method",
    "name": "initDefaultMediaListeners",
    "memberof": "src/browser/main/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/player.js~Player#initDefaultMediaListeners",
    "access": "public",
    "description": "Add listeners on this.element so we propagate all necessary\nevents to the this.host",
    "lineNumber": 46,
    "params": [],
    "return": null
  },
  {
    "__docId__": 165,
    "kind": "method",
    "name": "refresh",
    "memberof": "src/browser/main/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/player.js~Player#refresh",
    "access": "public",
    "description": "Update this.URL so getter read the correct data.\nAlso trigger a {@link this.host.start} event on the {@link Host}.",
    "lineNumber": 57,
    "params": [],
    "return": null
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "getId",
    "memberof": "src/browser/main/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/player.js~Player#getId",
    "access": "public",
    "description": "Get the id of the player",
    "lineNumber": 73,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{null|string} the elements source"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "null",
        "string"
      ],
      "spread": false,
      "description": "the elements source"
    },
    "params": []
  },
  {
    "__docId__": 168,
    "kind": "method",
    "name": "isPlaying",
    "memberof": "src/browser/main/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/player.js~Player#isPlaying",
    "access": "public",
    "description": "Returns true if the media is not paused",
    "lineNumber": 82,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "isPaused",
    "memberof": "src/browser/main/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/player.js~Player#isPaused",
    "access": "public",
    "description": "Returns true if the media is paused.",
    "lineNumber": 91,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "isStopped",
    "memberof": "src/browser/main/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/player.js~Player#isStopped",
    "access": "public",
    "description": "Return true if the media is paused and current time is 0.",
    "lineNumber": 100,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 171,
    "kind": "method",
    "name": "getLength",
    "memberof": "src/browser/main/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/player.js~Player#getLength",
    "access": "public",
    "description": "Length is expected in microseconds by host",
    "lineNumber": 109,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 172,
    "kind": "method",
    "name": "setVolume",
    "memberof": "src/browser/main/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/player.js~Player#setVolume",
    "access": "public",
    "description": "Set the volume of the media",
    "lineNumber": 117,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "volume",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "getVolume",
    "memberof": "src/browser/main/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/player.js~Player#getVolume",
    "access": "public",
    "description": "If media is muted return 0",
    "lineNumber": 126,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 174,
    "kind": "method",
    "name": "isMuted",
    "memberof": "src/browser/main/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/player.js~Player#isMuted",
    "access": "public",
    "description": "Is the media muted?",
    "lineNumber": 135,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 175,
    "kind": "method",
    "name": "setRate",
    "memberof": "src/browser/main/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/player.js~Player#setRate",
    "access": "public",
    "description": "Set the playback rate",
    "lineNumber": 143,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "rate",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 176,
    "kind": "method",
    "name": "getRate",
    "memberof": "src/browser/main/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/player.js~Player#getRate",
    "access": "public",
    "description": "Get the playback rate",
    "lineNumber": 151,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "getTitle",
    "memberof": "src/browser/main/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/player.js~Player#getTitle",
    "access": "public",
    "description": "Get the title of the player. The page's title by default.",
    "lineNumber": 160,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{null|string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "null",
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 178,
    "kind": "method",
    "name": "getArtists",
    "memberof": "src/browser/main/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/player.js~Player#getArtists",
    "access": "public",
    "description": "Get the artists of the player",
    "lineNumber": 169,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<string>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<string>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 179,
    "kind": "method",
    "name": "getCover",
    "memberof": "src/browser/main/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/player.js~Player#getCover",
    "access": "public",
    "description": "Get the cover of the player.\n\nUsing logo.clearbit.com API seems to work quite nicely.\nThe other alternative is to get the logo from the page's favicon ({@link this.page.getIcon()})",
    "lineNumber": 181,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 180,
    "kind": "method",
    "name": "getPosition",
    "memberof": "src/browser/main/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/player.js~Player#getPosition",
    "access": "public",
    "description": "Get the current time of the media",
    "lineNumber": 190,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} media current time"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "media current time"
    },
    "params": []
  },
  {
    "__docId__": 181,
    "kind": "method",
    "name": "isLooping",
    "memberof": "src/browser/main/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/player.js~Player#isLooping",
    "access": "public",
    "description": "Is the media looping?",
    "lineNumber": 198,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 182,
    "kind": "method",
    "name": "setLoop",
    "memberof": "src/browser/main/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/player.js~Player#setLoop",
    "access": "public",
    "description": "Should media loop when it reaches the end.",
    "lineNumber": 207,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "loop",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "play",
    "memberof": "src/browser/main/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/player.js~Player#play",
    "access": "public",
    "description": "Play media element",
    "lineNumber": 214,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "pause",
    "memberof": "src/browser/main/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/player.js~Player#pause",
    "access": "public",
    "description": "Pause media element",
    "lineNumber": 221,
    "params": [],
    "return": null
  },
  {
    "__docId__": 185,
    "kind": "method",
    "name": "playPause",
    "memberof": "src/browser/main/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/player.js~Player#playPause",
    "access": "public",
    "description": "If media is playing then pause\nelse play it",
    "lineNumber": 229,
    "params": [],
    "return": null
  },
  {
    "__docId__": 186,
    "kind": "method",
    "name": "stop",
    "memberof": "src/browser/main/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/player.js~Player#stop",
    "access": "public",
    "description": "Pause media and set position to 0",
    "lineNumber": 239,
    "params": [],
    "return": null
  },
  {
    "__docId__": 187,
    "kind": "method",
    "name": "seek",
    "memberof": "src/browser/main/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/player.js~Player#seek",
    "access": "public",
    "description": "seek by an offset to position",
    "lineNumber": 249,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "offset",
        "description": "offset to currentTime in microseconds"
      }
    ],
    "return": null
  },
  {
    "__docId__": 188,
    "kind": "method",
    "name": "setPosition",
    "memberof": "src/browser/main/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/player.js~Player#setPosition",
    "access": "public",
    "description": "Set the position of playback",
    "lineNumber": 257,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "new currentTime in microseconds"
      }
    ],
    "return": null
  },
  {
    "__docId__": 189,
    "kind": "method",
    "name": "toggleFullScreen",
    "memberof": "src/browser/main/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/player.js~Player#toggleFullScreen",
    "access": "public",
    "description": "Toogle the fullscreen state of the media.",
    "lineNumber": 265,
    "todo": [
      "test this works"
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 190,
    "kind": "method",
    "name": "getSiteDomain",
    "memberof": "src/browser/main/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/player.js~Player#getSiteDomain",
    "access": "public",
    "description": "Get the site domain (host)",
    "lineNumber": 277,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 191,
    "kind": "method",
    "name": "getUrl",
    "memberof": "src/browser/main/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/player.js~Player#getUrl",
    "access": "public",
    "description": "Get the elements url",
    "lineNumber": 285,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{null|string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "null",
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "isHidden",
    "memberof": "src/browser/main/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/player.js~Player#isHidden",
    "access": "public",
    "description": "Check if element is visible to the user",
    "lineNumber": 294,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 193,
    "kind": "method",
    "name": "isValid",
    "memberof": "src/browser/main/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/main/player.js~Player#isValid",
    "access": "public",
    "description": "",
    "lineNumber": 302,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 194,
    "kind": "file",
    "name": "src/browser/popup/popup.js",
    "content": "\n\nconst manifestData = chrome.runtime.getManifest();\ndocument.getElementById('version').innerText = manifestData.version;\n\nfetch('https://api.github.com/repos/lt-mayonesa/browser-mpris2/releases/latest')\n    .then(response => response.json())\n    .then(json => {\n        return {\n            title: json.name, version: json.tag_name, artifact: json.assets[0].browser_download_url\n        };\n    })\n    .then(data => {\n        let current = new Version(chrome.runtime.getManifest().version);\n        let latest = new Version(data.version);\n        if (latest.isGreaterThan(current)) {\n            let p = document.getElementById('latest');\n            p.classList.remove('hidden');\n            p.querySelector('a').innerHTML = data.version;\n        }\n    })\n    .catch(console.error);\n",
    "static": true,
    "longname": "/home/travis/build/Lt-Mayonesa/browser-mpris2/src/browser/popup/popup.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 195,
    "kind": "variable",
    "name": "manifestData",
    "memberof": "src/browser/popup/popup.js",
    "static": true,
    "longname": "src/browser/popup/popup.js~manifestData",
    "access": "public",
    "export": false,
    "importPath": "browser-mpris2/src/browser/popup/popup.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 196,
    "kind": "file",
    "name": "src/browser/popup/version.js",
    "content": "/**\n * @property {number} mayor\n * @property {number} minor\n * @property {number} patch\n */\nclass Version {\n    /**\n     *\n     * @param {string} version :: a semver valid string. ie: v1.0.1\n     */\n    constructor(version) {\n        [this.mayor, this.minor, this.patch] =\n            version.replace('v', '')\n                .split('.')\n                .map(n => {\n                    n = Number(n);\n                    if (isNaN(n))\n                        throw new Error(`${version} is not a valid semantic version.`);\n                    return n;\n                });\n    }\n\n    /**\n     *\n     * @param {Version} other\n     * @return {boolean}\n     */\n    isGreaterThan(other) {\n        if (this.mayor !== other.mayor)\n            return this.mayor > other.mayor;\n        else if (this.minor !== other.minor)\n            return this.minor > other.minor;\n        else\n            return this.patch > other.patch;\n    }\n\n}\n",
    "static": true,
    "longname": "/home/travis/build/Lt-Mayonesa/browser-mpris2/src/browser/popup/version.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 197,
    "kind": "class",
    "name": "Version",
    "memberof": "src/browser/popup/version.js",
    "static": true,
    "longname": "src/browser/popup/version.js~Version",
    "access": "public",
    "export": false,
    "importPath": "browser-mpris2/src/browser/popup/version.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 6,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "mayor",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "minor",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "patch",
        "description": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 198,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/browser/popup/version.js~Version",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/popup/version.js~Version#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "version",
        "description": ":: a semver valid string. ie: v1.0.1"
      }
    ]
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "isGreaterThan",
    "memberof": "src/browser/popup/version.js~Version",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/popup/version.js~Version#isGreaterThan",
    "access": "public",
    "description": "",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "Version"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 200,
    "kind": "file",
    "name": "src/browser/providers/netflix.js",
    "content": "/**\n *\n * This file adds support for Netflix specific playback\n *\n * by extending and overriding the classes {@link Page},\n * {@link Playback}, and {@link Player}.\n * we can define how we'll interact with the site\n *\n *\n */\n\n/**\n * Netflix Player\n */\nclass NetflixPlayer extends Player {\n\n    getId () {\n        return this.URL.searchParams.get('trackId');\n    }\n\n    getTitle () {\n        let spans = Array.prototype.slice.call(document.querySelectorAll('.video-title span'));\n        return (spans && spans.reduce((acc, cur) => (acc.textContent || acc) + ' ' + cur.textContent, '')) || super.getTitle();\n    }\n\n    getArtists () {\n        let h4 = document.querySelector('.video-title h4');\n        return (h4 && [h4.textContent]) || super.getArtists();\n    }\n\n    isValid () {\n        return this.URL.pathname.indexOf('/watch') !== -1 && super.isValid();\n    }\n\n}\n\nPlayer = NetflixPlayer;\n\n/**\n * Netflix Playback\n */\nclass NetflixPlayback extends Playback {\n\n    seek (offset) {\n        let btn;\n        if (offset > 0)\n            btn = document.querySelector('.button-nfplayerFastForward');\n        else if (offset < 0)\n            btn = document.querySelector('.button-nfplayerBackTen');\n\n        btn && btn.click();\n    }\n\n    canGoNext () {\n        return !!document.querySelector('.button-nfplayerNextEpisode');\n    }\n\n    next () {\n        let btn;\n        btn = document.querySelector('.skip-credits a');\n        if (!btn)\n            btn = document.querySelector('.button-nfplayerNextEpisode');\n        btn && btn.click();\n    }\n\n    setPosition (id, position) {\n        //disabled\n    }\n\n    setRate (rate) {\n        //disabled\n    }\n\n    setLoopStatus (status) {\n        //disabled\n    }\n\n}\n\nPlayback = NetflixPlayback;\n\n/**\n * Netflix Page\n */\nclass NetflixPage extends Page {\n\n    registerPlayer (element) {\n        let result = super.registerPlayer(element);\n        if (result) {\n            let btn = document.querySelector('.button-nfplayerBack');\n            btn && btn.addEventListener('click', () => host.quit());\n        }\n        return result;\n    }\n\n}\n\nPage = NetflixPage;\n",
    "static": true,
    "longname": "/home/travis/build/Lt-Mayonesa/browser-mpris2/src/browser/providers/netflix.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 201,
    "kind": "class",
    "name": "NetflixPlayer",
    "memberof": "src/browser/providers/netflix.js",
    "static": true,
    "longname": "src/browser/providers/netflix.js~NetflixPlayer",
    "access": "public",
    "export": false,
    "importPath": "browser-mpris2/src/browser/providers/netflix.js",
    "importStyle": null,
    "description": "Netflix Player",
    "lineNumber": 15,
    "interface": false,
    "extends": [
      "Player"
    ]
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "getId",
    "memberof": "src/browser/providers/netflix.js~NetflixPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/netflix.js~NetflixPlayer#getId",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "getTitle",
    "memberof": "src/browser/providers/netflix.js~NetflixPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/netflix.js~NetflixPlayer#getTitle",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "getArtists",
    "memberof": "src/browser/providers/netflix.js~NetflixPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/netflix.js~NetflixPlayer#getArtists",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "isValid",
    "memberof": "src/browser/providers/netflix.js~NetflixPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/netflix.js~NetflixPlayer#isValid",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 206,
    "kind": "class",
    "name": "NetflixPlayback",
    "memberof": "src/browser/providers/netflix.js",
    "static": true,
    "longname": "src/browser/providers/netflix.js~NetflixPlayback",
    "access": "public",
    "export": false,
    "importPath": "browser-mpris2/src/browser/providers/netflix.js",
    "importStyle": null,
    "description": "Netflix Playback",
    "lineNumber": 42,
    "interface": false,
    "extends": [
      "Playback"
    ]
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "seek",
    "memberof": "src/browser/providers/netflix.js~NetflixPlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/netflix.js~NetflixPlayback#seek",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [
      {
        "name": "offset",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "canGoNext",
    "memberof": "src/browser/providers/netflix.js~NetflixPlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/netflix.js~NetflixPlayback#canGoNext",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "next",
    "memberof": "src/browser/providers/netflix.js~NetflixPlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/netflix.js~NetflixPlayback#next",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "setPosition",
    "memberof": "src/browser/providers/netflix.js~NetflixPlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/netflix.js~NetflixPlayback#setPosition",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "position",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "setRate",
    "memberof": "src/browser/providers/netflix.js~NetflixPlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/netflix.js~NetflixPlayback#setRate",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [
      {
        "name": "rate",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 212,
    "kind": "method",
    "name": "setLoopStatus",
    "memberof": "src/browser/providers/netflix.js~NetflixPlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/netflix.js~NetflixPlayback#setLoopStatus",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "params": [
      {
        "name": "status",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 213,
    "kind": "class",
    "name": "NetflixPage",
    "memberof": "src/browser/providers/netflix.js",
    "static": true,
    "longname": "src/browser/providers/netflix.js~NetflixPage",
    "access": "public",
    "export": false,
    "importPath": "browser-mpris2/src/browser/providers/netflix.js",
    "importStyle": null,
    "description": "Netflix Page",
    "lineNumber": 85,
    "interface": false,
    "extends": [
      "Page"
    ]
  },
  {
    "__docId__": 214,
    "kind": "method",
    "name": "registerPlayer",
    "memberof": "src/browser/providers/netflix.js~NetflixPage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/netflix.js~NetflixPage#registerPlayer",
    "access": "public",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "params": [
      {
        "name": "element",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 215,
    "kind": "file",
    "name": "src/browser/providers/soundcloud.js",
    "content": "/**\n *\n * This file adds support for Soundcloud specific playback\n *\n * by extending and overriding the classes {@link Page},\n * {@link Playback}, and {@link Player}.\n * we can define how we'll interact with the site\n *\n *\n */\n\n/**\n * SoundCloud Player\n */\nclass SoundCloudPlayer extends Player {\n\n    getId () {\n        return (this.page.elements.title && this.page.elements.title.textContent) ||\n          super.getTitle();\n    }\n\n    getLength () {\n        if (this.page.elements.progress) {\n            return Math.trunc(this.page.elements.progress.getAttribute('aria-valuemax') * 1e6);\n        } else\n            return super.getLength();\n    }\n\n    getCover () {\n        if (this.page.elements.avatar) {\n            return this.page.elements.avatar.style.backgroundImage\n              .slice(5, -2) //remove url( )\n              .replace('t50x50', 't500x500'); //we want the big thumbnail\n        } else\n            return super.getCover();\n    }\n\n    getTitle () {\n        let title = this.page.elements.title.lastElementChild;\n        return (title && title.textContent) || super.getTitle();\n    }\n\n    getArtists () {\n        return (this.page.elements.artists && [this.page.elements.artists.textContent]) ||\n          super.getArtists();\n    }\n\n}\n\nPlayer = SoundCloudPlayer;\n\n/**\n * SoundCloud Playback\n */\nclass SoundCloudPlayback extends Playback {\n\n    setVolume (volume) {\n        super.setVolume(volume);\n        let btn = this.controls.volumeButton;\n        let icon = btn.parentElement.parentElement;\n        if (volume === 0)\n            icon && icon.classList.add('muted');\n        else\n            icon && icon.classList.remove('muted');\n\n        if (this.controls.volumeHandle) {\n            this.controls.volumeHandle.style.top = `${102 - 92 * volume}px`;\n            this.controls.volumeProgress.style.height = `${92 * volume}px`;\n        }\n    }\n\n    canGoNext () {\n        return !!this.controls.nextButton;\n    }\n\n    canGoPrevious () {\n        return !!this.controls.previousButton;\n    }\n\n    next () {\n        this.controls.nextButton.click();\n    }\n\n    previous () {\n        this.controls.previousButton.click();\n    }\n\n    isShuffle () {\n        return this.controls.shuffleButton &&\n          this.controls.shuffleButton.classList.contains('m-shuffling');\n    }\n\n    setShuffle (isShuffle) {\n        if (this.controls.shuffleButton) {\n            if ((!this.isShuffle() && isShuffle) || (this.isShuffle() && !isShuffle))\n                this.controls.shuffleButton.click();\n        }\n    }\n\n    setRate (rate) {\n        // the soundcloud UI doesn't expose any rate controls so I don't think\n        // it'd be a good idea to expose them through MPRIS; users couldn't\n        // change them back from the webpage\n    }\n\n    getLoopStatus () {\n        if (this.controls.repeatButton.classList.contains('m-all')) {\n            return LoopStatus.PLAYLIST;\n        } else if (this.controls.repeatButton.classList.contains('m-one')) {\n            return LoopStatus.TRACK;\n        } else {\n            return LoopStatus.NONE;\n        }\n    }\n\n    setLoopStatus (status) {\n        if (this.controls.repeatButton)\n            this.controls.repeatButton.click();\n    }\n\n}\n\nPlayback = SoundCloudPlayback;\n\nwindow.addEventListener('mpris2-setup', function () {\n    page.playback.controls = {\n        shuffleButton: document.querySelector('.shuffleControl'),\n        repeatButton: document.querySelector('.repeatControl'),\n        nextButton: document.querySelector('.skipControl__next'),\n        previousButton: document.querySelector('.skipControl__previous'),\n        volumeButton: document.querySelector('.volume__button'),\n        volumeHandle: document.querySelector('.volume__sliderHandle'),\n        volumeProgress: document.querySelector('.volume__sliderProgress')\n    };\n\n    page.elements = {\n        title: document.querySelector('.playbackSoundBadge__titleLink'),\n        progress: document.querySelector('.playbackTimeline__progressWrapper'),\n        avatar: document.querySelector('.playbackSoundBadge__avatar span'),\n        artists: document.querySelector('.playbackSoundBadge__lightLink')\n    };\n\n    const observer = new MutationObserver(() => {\n        Object.assign(page.elements, {\n            title: document.querySelector('.playbackSoundBadge__titleLink'),\n            progress: document.querySelector('.playbackTimeline__progressWrapper'),\n            avatar: document.querySelector('.playbackSoundBadge__avatar span'),\n            artists: document.querySelector('.playbackSoundBadge__lightLink')\n        });\n    });\n    observer.observe(document.querySelector('.playControls__soundBadge'), {\n        subtree: true,\n        childList: true\n    });\n\n    page.playback.controls.shuffleButton\n      .addEventListener('click', () => page.host.change());\n    page.playback.controls.repeatButton\n      .addEventListener('click', () => page.host.change());\n});\n",
    "static": true,
    "longname": "/home/travis/build/Lt-Mayonesa/browser-mpris2/src/browser/providers/soundcloud.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 216,
    "kind": "class",
    "name": "SoundCloudPlayer",
    "memberof": "src/browser/providers/soundcloud.js",
    "static": true,
    "longname": "src/browser/providers/soundcloud.js~SoundCloudPlayer",
    "access": "public",
    "export": false,
    "importPath": "browser-mpris2/src/browser/providers/soundcloud.js",
    "importStyle": null,
    "description": "SoundCloud Player",
    "lineNumber": 15,
    "interface": false,
    "extends": [
      "Player"
    ]
  },
  {
    "__docId__": 217,
    "kind": "method",
    "name": "getId",
    "memberof": "src/browser/providers/soundcloud.js~SoundCloudPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/soundcloud.js~SoundCloudPlayer#getId",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 218,
    "kind": "method",
    "name": "getLength",
    "memberof": "src/browser/providers/soundcloud.js~SoundCloudPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/soundcloud.js~SoundCloudPlayer#getLength",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 219,
    "kind": "method",
    "name": "getCover",
    "memberof": "src/browser/providers/soundcloud.js~SoundCloudPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/soundcloud.js~SoundCloudPlayer#getCover",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 220,
    "kind": "method",
    "name": "getTitle",
    "memberof": "src/browser/providers/soundcloud.js~SoundCloudPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/soundcloud.js~SoundCloudPlayer#getTitle",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 221,
    "kind": "method",
    "name": "getArtists",
    "memberof": "src/browser/providers/soundcloud.js~SoundCloudPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/soundcloud.js~SoundCloudPlayer#getArtists",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 222,
    "kind": "class",
    "name": "SoundCloudPlayback",
    "memberof": "src/browser/providers/soundcloud.js",
    "static": true,
    "longname": "src/browser/providers/soundcloud.js~SoundCloudPlayback",
    "access": "public",
    "export": false,
    "importPath": "browser-mpris2/src/browser/providers/soundcloud.js",
    "importStyle": null,
    "description": "SoundCloud Playback",
    "lineNumber": 55,
    "interface": false,
    "extends": [
      "Playback"
    ]
  },
  {
    "__docId__": 223,
    "kind": "method",
    "name": "setVolume",
    "memberof": "src/browser/providers/soundcloud.js~SoundCloudPlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/soundcloud.js~SoundCloudPlayback#setVolume",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [
      {
        "name": "volume",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "canGoNext",
    "memberof": "src/browser/providers/soundcloud.js~SoundCloudPlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/soundcloud.js~SoundCloudPlayback#canGoNext",
    "access": "public",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "canGoPrevious",
    "memberof": "src/browser/providers/soundcloud.js~SoundCloudPlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/soundcloud.js~SoundCloudPlayback#canGoPrevious",
    "access": "public",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "next",
    "memberof": "src/browser/providers/soundcloud.js~SoundCloudPlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/soundcloud.js~SoundCloudPlayback#next",
    "access": "public",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 227,
    "kind": "method",
    "name": "previous",
    "memberof": "src/browser/providers/soundcloud.js~SoundCloudPlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/soundcloud.js~SoundCloudPlayback#previous",
    "access": "public",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 228,
    "kind": "method",
    "name": "isShuffle",
    "memberof": "src/browser/providers/soundcloud.js~SoundCloudPlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/soundcloud.js~SoundCloudPlayback#isShuffle",
    "access": "public",
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 229,
    "kind": "method",
    "name": "setShuffle",
    "memberof": "src/browser/providers/soundcloud.js~SoundCloudPlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/soundcloud.js~SoundCloudPlayback#setShuffle",
    "access": "public",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "params": [
      {
        "name": "isShuffle",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 230,
    "kind": "method",
    "name": "setRate",
    "memberof": "src/browser/providers/soundcloud.js~SoundCloudPlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/soundcloud.js~SoundCloudPlayback#setRate",
    "access": "public",
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "params": [
      {
        "name": "rate",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 231,
    "kind": "method",
    "name": "getLoopStatus",
    "memberof": "src/browser/providers/soundcloud.js~SoundCloudPlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/soundcloud.js~SoundCloudPlayback#getLoopStatus",
    "access": "public",
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 232,
    "kind": "method",
    "name": "setLoopStatus",
    "memberof": "src/browser/providers/soundcloud.js~SoundCloudPlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/soundcloud.js~SoundCloudPlayback#setLoopStatus",
    "access": "public",
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "params": [
      {
        "name": "status",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 233,
    "kind": "file",
    "name": "src/browser/providers/spotify.js",
    "content": "class SpotifyPlayer extends Player {\n\n    getTitle() {\n        const elm = document.querySelector('.now-playing-bar .track-info__name');\n        return elm ? elm.textContent : super.getTitle();\n    }\n\n    getArtists() {\n        const elm = document.querySelector('.now-playing-bar .track-info__artists');\n        return elm ? [elm.textContent] : super.getArtists();\n    }\n\n    getCover() {\n        const elm = document.querySelector('.now-playing-bar .cover-art-image');\n        return elm ?\n            elm.style.backgroundImage\n                .replace('url(\"', '')\n                .replace('\")', '') :\n            super.getCover();\n    }\n\n    isPlaying() {\n        const elm = this.page.playback.controls.play;\n        return elm ? elm.title === 'Pause' : super.isPlaying();\n    }\n\n}\n\nPlayer = SpotifyPlayer;\n\nclass SpotifyPlayback extends Playback {\n\n    canGoNext() {\n        const elm = this.controls.next;\n        return elm ? !elm.classList.contains('control-button--disabled') : super.canGoNext();\n    }\n\n    next() {\n        const elm = this.controls.next;\n        (elm && elm.click()) || super.next();\n    }\n\n    canGoPrevious() {\n        const elm = this.controls.prev;\n        return elm ? !elm.classList.contains('control-button--disabled') : super.canGoPrevious();\n    }\n\n    previous() {\n        (this.controls.prev && this.controls.prev.click()) || super.previous();\n    }\n\n    setShuffle(isShuffle) {\n        this.controls.shuffle && this.controls.shuffle.click();\n    }\n\n    isShuffle() {\n        return this.controls.shuffle ?\n            this.controls.shuffle.classList.contains('control-button--active') :\n            super.isShuffle();\n    }\n\n    getLoopStatus() {\n        if (this.controls.repeat) {\n            const classes = this.controls.repeat.classList;\n            if (classes.contains('spoticon-repeatonce-16'))\n                return LoopStatus.TRACK;\n            else if (classes.contains('control-button--active'))\n                return LoopStatus.PLAYLIST;\n            else\n                return LoopStatus.NONE;\n        } else\n            return super.getLoopStatus();\n    }\n\n    setLoopStatus(status) {\n        if (this.controls.repeat)\n            this.controls.repeat.click();\n        else\n            super.setLoopStatus(status);\n    }\n\n    setVolume(volume) {\n        if (this.controls.volumeProgress) {\n            this.controls.volumeProgress.style.transform = `translateX(${volume * 100 - 100}%)`;\n        }\n        super.setVolume(volume);\n    }\n\n}\n\nPlayback = SpotifyPlayback;\n\nwindow.addEventListener('mpris2-setup', function () {\n    const BUTTONS_CONTAINER = '.now-playing-bar .player-controls__buttons';\n\n    page.playback.controls = {\n        shuffle: document.querySelector(BUTTONS_CONTAINER + ' button:nth-child(1)'),\n        repeat: document.querySelector(BUTTONS_CONTAINER + ' button:nth-child(5)'),\n        play: document.querySelector(BUTTONS_CONTAINER + ' button:nth-child(3)'),\n        next: document.querySelector(BUTTONS_CONTAINER + ' button:nth-child(4)'),\n        prev: document.querySelector(BUTTONS_CONTAINER + ' button:nth-child(2)'),\n\n        // volumeHandle: document.querySelector('.volume__sliderHandle'),\n        volumeProgress: document.querySelector('.volume-bar .progress-bar__fg')\n    };\n\n    const observer = new MutationObserver(() => {\n        page.host.change();\n    });\n\n    Object.values(page.playback.controls).forEach(control => {\n        observer.observe(control, {\n            attributes: true,\n            attributeFilter: ['class']\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/Lt-Mayonesa/browser-mpris2/src/browser/providers/spotify.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 234,
    "kind": "class",
    "name": "SpotifyPlayer",
    "memberof": "src/browser/providers/spotify.js",
    "static": true,
    "longname": "src/browser/providers/spotify.js~SpotifyPlayer",
    "access": "public",
    "export": false,
    "importPath": "browser-mpris2/src/browser/providers/spotify.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false,
    "extends": [
      "Player"
    ]
  },
  {
    "__docId__": 235,
    "kind": "method",
    "name": "getTitle",
    "memberof": "src/browser/providers/spotify.js~SpotifyPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/spotify.js~SpotifyPlayer#getTitle",
    "access": "public",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 236,
    "kind": "method",
    "name": "getArtists",
    "memberof": "src/browser/providers/spotify.js~SpotifyPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/spotify.js~SpotifyPlayer#getArtists",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 237,
    "kind": "method",
    "name": "getCover",
    "memberof": "src/browser/providers/spotify.js~SpotifyPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/spotify.js~SpotifyPlayer#getCover",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "method",
    "name": "isPlaying",
    "memberof": "src/browser/providers/spotify.js~SpotifyPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/spotify.js~SpotifyPlayer#isPlaying",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 239,
    "kind": "class",
    "name": "SpotifyPlayback",
    "memberof": "src/browser/providers/spotify.js",
    "static": true,
    "longname": "src/browser/providers/spotify.js~SpotifyPlayback",
    "access": "public",
    "export": false,
    "importPath": "browser-mpris2/src/browser/providers/spotify.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "interface": false,
    "extends": [
      "Playback"
    ]
  },
  {
    "__docId__": 240,
    "kind": "method",
    "name": "canGoNext",
    "memberof": "src/browser/providers/spotify.js~SpotifyPlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/spotify.js~SpotifyPlayback#canGoNext",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 241,
    "kind": "method",
    "name": "next",
    "memberof": "src/browser/providers/spotify.js~SpotifyPlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/spotify.js~SpotifyPlayback#next",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 242,
    "kind": "method",
    "name": "canGoPrevious",
    "memberof": "src/browser/providers/spotify.js~SpotifyPlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/spotify.js~SpotifyPlayback#canGoPrevious",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 243,
    "kind": "method",
    "name": "previous",
    "memberof": "src/browser/providers/spotify.js~SpotifyPlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/spotify.js~SpotifyPlayback#previous",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 244,
    "kind": "method",
    "name": "setShuffle",
    "memberof": "src/browser/providers/spotify.js~SpotifyPlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/spotify.js~SpotifyPlayback#setShuffle",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [
      {
        "name": "isShuffle",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "isShuffle",
    "memberof": "src/browser/providers/spotify.js~SpotifyPlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/spotify.js~SpotifyPlayback#isShuffle",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 246,
    "kind": "method",
    "name": "getLoopStatus",
    "memberof": "src/browser/providers/spotify.js~SpotifyPlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/spotify.js~SpotifyPlayback#getLoopStatus",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 247,
    "kind": "method",
    "name": "setLoopStatus",
    "memberof": "src/browser/providers/spotify.js~SpotifyPlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/spotify.js~SpotifyPlayback#setLoopStatus",
    "access": "public",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "params": [
      {
        "name": "status",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 248,
    "kind": "method",
    "name": "setVolume",
    "memberof": "src/browser/providers/spotify.js~SpotifyPlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/spotify.js~SpotifyPlayback#setVolume",
    "access": "public",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "params": [
      {
        "name": "volume",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 249,
    "kind": "file",
    "name": "src/browser/providers/youtube-music.js",
    "content": "/**\n *\n * This file adds support for Youtube Music specific playback\n *\n * by extending and overriding the classes {@link Page},\n * {@link Playback}, and {@link Player}.\n * we can define how we'll interact with youtube's site\n *\n *\n */\n\n/**\n * The metadata sent to the mpris host is defined\n * by the {@link Player} implementation.\n */\nclass YouTubeMusicPlayer extends Player {\n\n    /**\n     *\n     * @returns {string}\n     */\n    getId () {\n        let url = new URL(location);\n        return url.searchParams.get('v');\n    }\n\n    /**\n     * @return {string}\n     */\n    getTitle () {\n        let title = document.querySelector('.title.ytmusic-player-bar');\n        return (title && title.textContent) || super.getTitle();\n    }\n\n    /**\n     * @return {Array<string>}\n     */\n    getArtists () {\n        let artists = document.querySelector('.byline.ytmusic-player-bar');\n        return (artists && artists.textContent.split(' • ').slice(0, 1)) || super.getArtists();\n    }\n\n    /**\n     * @returns {string}\n     */\n    getCover () {\n        let img = document.querySelector('.image.ytmusic-player-bar');\n        return (img && img.getAttribute('src').replace(/w\\d+-h\\d+/g, 'w544-h544')) || super.getCover();\n    }\n}\n\nPlayer = YouTubeMusicPlayer;\n\n/**\n * YouTube Music Playback\n */\nclass YouTubeMusicPlayback extends Playback {\n\n    setRate (rate) {\n        // stub (rate should not be supported)\n    }\n\n    /**\n     * YouTube Music shuffles the playlist on click\n     *\n     * @param isShuffle\n     */\n    setShuffle (isShuffle) {\n        if (this.controls.shuffleButton)\n            this.controls.shuffleButton.click();\n    }\n\n    setVolume (volume) {\n        super.setVolume(volume);\n        if (volume > 0 && this.activePlayer.isMuted() && this.isActionPressed(this.controls.volumeButton)) {\n            this.controls.volumeButton.click();\n        }\n        if (this.controls.volumeKnob) {\n            this.controls.volumeKnob.style.left = `${volume * 100}%`;\n            this.controls.volumeProcess.style.transform = `scaleX(${volume})`;\n        }\n    }\n\n    getLoopStatus () {\n        if (this.controls.loopPlaylistButton) {\n            let label = this.controls.loopPlaylistButton.getAttribute('aria-label');\n            return label === 'Repeat all' ? LoopStatus.PLAYLIST :\n              label === 'Repeat one' ? LoopStatus.TRACK : LoopStatus.NONE;\n        } else\n            return super.getLoopStatus();\n    }\n\n    setLoopStatus (status) {\n        this.controls.loopPlaylistButton && this.controls.loopPlaylistButton.click();\n    }\n\n    canGoNext () {\n        return !!this.controls.nextButton;\n    }\n\n    canGoPrevious () {\n        return !!this.controls.previousButton;\n    }\n\n    next () {\n        this.controls.nextButton.click();\n    }\n\n    previous () {\n        this.controls.previousButton.click();\n    }\n\n    /**\n     *\n     * @param {HTMLElement} button\n     * @returns {boolean}\n     */\n    isActionPressed (button) {\n        return button.getAttribute('aria-pressed') === 'true';\n    }\n}\n\nPlayback = YouTubeMusicPlayback;\n\n/*\n    for youtube we need to listen for yt-page-data-updated\n    we subscribe to mpris2-setup to make sure page is defined\n */\nwindow.addEventListener('mpris2-setup', () => {\n    page.playback.controls = {\n        nextButton: document.querySelector('.next-button.ytmusic-player-bar'),\n        previousButton: document.querySelector('.previous-button.ytmusic-player-bar'),\n        shuffleButton: document.querySelector('.shuffle.ytmusic-player-bar'),\n        loopPlaylistButton: document.querySelector('.repeat.ytmusic-player-bar'),\n        volumeKnob: document.getElementById('sliderKnob'),\n        volumeProcess: document.getElementById('primaryProgress'),\n        volumeButton: document.querySelector('.volume.ytmusic-player-bar')\n    };\n\n    page.observeForChanges(page.playback.controls.loopPlaylistButton, {\n        attributeFilter: ['aria-label']\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/Lt-Mayonesa/browser-mpris2/src/browser/providers/youtube-music.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 250,
    "kind": "class",
    "name": "YouTubeMusicPlayer",
    "memberof": "src/browser/providers/youtube-music.js",
    "static": true,
    "longname": "src/browser/providers/youtube-music.js~YouTubeMusicPlayer",
    "access": "public",
    "export": false,
    "importPath": "browser-mpris2/src/browser/providers/youtube-music.js",
    "importStyle": null,
    "description": "The metadata sent to the mpris host is defined\nby the {@link Player} implementation.",
    "lineNumber": 16,
    "interface": false,
    "extends": [
      "Player"
    ]
  },
  {
    "__docId__": 251,
    "kind": "method",
    "name": "getId",
    "memberof": "src/browser/providers/youtube-music.js~YouTubeMusicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/youtube-music.js~YouTubeMusicPlayer#getId",
    "access": "public",
    "description": "",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 252,
    "kind": "method",
    "name": "getTitle",
    "memberof": "src/browser/providers/youtube-music.js~YouTubeMusicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/youtube-music.js~YouTubeMusicPlayer#getTitle",
    "access": "public",
    "description": "",
    "lineNumber": 30,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 253,
    "kind": "method",
    "name": "getArtists",
    "memberof": "src/browser/providers/youtube-music.js~YouTubeMusicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/youtube-music.js~YouTubeMusicPlayer#getArtists",
    "access": "public",
    "description": "",
    "lineNumber": 38,
    "return": {
      "nullable": null,
      "types": [
        "Array<string>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 254,
    "kind": "method",
    "name": "getCover",
    "memberof": "src/browser/providers/youtube-music.js~YouTubeMusicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/youtube-music.js~YouTubeMusicPlayer#getCover",
    "access": "public",
    "description": "",
    "lineNumber": 46,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 255,
    "kind": "class",
    "name": "YouTubeMusicPlayback",
    "memberof": "src/browser/providers/youtube-music.js",
    "static": true,
    "longname": "src/browser/providers/youtube-music.js~YouTubeMusicPlayback",
    "access": "public",
    "export": false,
    "importPath": "browser-mpris2/src/browser/providers/youtube-music.js",
    "importStyle": null,
    "description": "YouTube Music Playback",
    "lineNumber": 57,
    "interface": false,
    "extends": [
      "Playback"
    ]
  },
  {
    "__docId__": 256,
    "kind": "method",
    "name": "setRate",
    "memberof": "src/browser/providers/youtube-music.js~YouTubeMusicPlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/youtube-music.js~YouTubeMusicPlayback#setRate",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [
      {
        "name": "rate",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 257,
    "kind": "method",
    "name": "setShuffle",
    "memberof": "src/browser/providers/youtube-music.js~YouTubeMusicPlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/youtube-music.js~YouTubeMusicPlayback#setShuffle",
    "access": "public",
    "description": "YouTube Music shuffles the playlist on click",
    "lineNumber": 68,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "isShuffle",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 258,
    "kind": "method",
    "name": "setVolume",
    "memberof": "src/browser/providers/youtube-music.js~YouTubeMusicPlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/youtube-music.js~YouTubeMusicPlayback#setVolume",
    "access": "public",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "params": [
      {
        "name": "volume",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 259,
    "kind": "method",
    "name": "getLoopStatus",
    "memberof": "src/browser/providers/youtube-music.js~YouTubeMusicPlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/youtube-music.js~YouTubeMusicPlayback#getLoopStatus",
    "access": "public",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 260,
    "kind": "method",
    "name": "setLoopStatus",
    "memberof": "src/browser/providers/youtube-music.js~YouTubeMusicPlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/youtube-music.js~YouTubeMusicPlayback#setLoopStatus",
    "access": "public",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "params": [
      {
        "name": "status",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 261,
    "kind": "method",
    "name": "canGoNext",
    "memberof": "src/browser/providers/youtube-music.js~YouTubeMusicPlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/youtube-music.js~YouTubeMusicPlayback#canGoNext",
    "access": "public",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 262,
    "kind": "method",
    "name": "canGoPrevious",
    "memberof": "src/browser/providers/youtube-music.js~YouTubeMusicPlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/youtube-music.js~YouTubeMusicPlayback#canGoPrevious",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 263,
    "kind": "method",
    "name": "next",
    "memberof": "src/browser/providers/youtube-music.js~YouTubeMusicPlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/youtube-music.js~YouTubeMusicPlayback#next",
    "access": "public",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 264,
    "kind": "method",
    "name": "previous",
    "memberof": "src/browser/providers/youtube-music.js~YouTubeMusicPlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/youtube-music.js~YouTubeMusicPlayback#previous",
    "access": "public",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 265,
    "kind": "method",
    "name": "isActionPressed",
    "memberof": "src/browser/providers/youtube-music.js~YouTubeMusicPlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/youtube-music.js~YouTubeMusicPlayback#isActionPressed",
    "access": "public",
    "description": "",
    "lineNumber": 118,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "button",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 266,
    "kind": "file",
    "name": "src/browser/providers/youtube.js",
    "content": "/**\n *\n * This file adds support for Youtube specific playback\n *\n * by extending and overriding the classes {@link Page},\n * {@link Playback}, and {@link Player}.\n * we can define how we'll interact with youtube's site\n *\n *\n */\n\n/**\n * The metadata sent to the mpris host is defined\n * by the {@link Player} implementation\n *\n * For youtube we get:\n *  - the song title from the html\n *  - the artist from the uploader\n *  - the cover image from the static resource of the thumbnail\n */\nclass YouTubePlayer extends Player {\n\n    /**\n     * A youtube video can have 4 different baseURLs\n     *\n     * 1. /watch?v=ID_OF_VIDEO - when watching the default way\n     * 2. /embed/ID_OF_VIDEO - when it is embedded on a different site\n     * 3. /user/nprmusic - when in a users page\n     * 4. /channel/UCC6mthPyZTpbk-Klz9RMxMw - when in a channels page\n     *\n     * In cases 3 and 4 we don't have a way to figure out it's video id\n     * so the player id will be the full URL\n     *\n     * @returns {string}\n     */\n    getId () {\n        if (this.URL.pathname === '/watch') {\n            return this.URL.searchParams.get('v');\n        } else if (this.URL.pathname.match('/embed')) {\n            return this.URL.pathname.split('/').pop();\n        } else\n            return this.getUrl();\n    }\n\n    getTitle () {\n        let title = document.querySelector('.ytp-title-text');\n        return (title && title.textContent) || super.getTitle();\n    }\n\n    getArtists () {\n        let owner = document.querySelector('#owner-name a');\n        return owner && [owner.textContent];\n    }\n\n    /**\n     * If we couldn't figure out the video id (see {@link getId})\n     * then the player's id will be the element's baseURI, if that's the case\n     * we won't be able to get the thumbnail. so call super\n     *\n     * @returns {string}\n     */\n    getCover () {\n        if (this.getId().indexOf('/') !== -1)\n            return super.getCover();\n        return `https://i.ytimg.com/vi/${this.getId()}/hqdefault.jpg`;\n    }\n}\n\nPlayer = YouTubePlayer;\n\n/**\n * YouTube Playback\n */\nclass YouTubePlayback extends Playback {\n\n    setRate (rate) {\n        if (rate <= 0)\n            return;\n        const closestRate = rate <= 1.75 ? Math.ceil(rate * 4) : 7;\n\n        // first make the settings menu appear\n        document.querySelector('.ytp-settings-button').click();\n        // then the \"speed\" submenu\n        document.querySelectorAll('.ytp-settings-menu .ytp-menuitem')\n          .forEach(each => {\n              if (each.firstElementChild.innerText === 'Speed')\n                  each.click();\n          });\n\n        // set a timeout because of animation delays\n        setTimeout(() => {\n            // select the closest speed\n            document.querySelectorAll('.ytp-settings-menu .ytp-menuitem')\n              [closestRate - 1].click();\n            // and close the settings menu again\n            document.querySelector('.ytp-settings-button').click();\n        }, 300);\n    }\n\n    setVolume (volume) {\n        super.setVolume(volume);\n        if (volume === 0 && this.controls.volumeButton && this.controls.volumeButton.title.indexOf('Mute') !== -1)\n            this.controls.volumeButton.click();\n        else {\n            if (this.controls.volumeButton && this.controls.volumeButton.title.indexOf('Unmute') !== -1)\n                this.controls.volumeButton.click();\n\n            if (this.controls.volumeHandle) {\n                this.controls.volumeHandle.style.left = `${40 * volume}px`;\n            }\n        }\n\n    };\n\n    isShuffle () {\n        return this.isControlAvailable(this.controls.shuffleButton) &&\n          this.isActionPressed(this.controls.shuffleButton);\n    }\n\n    setShuffle (isShuffle) {\n        if (this.controls.shuffleButton)\n            this.controls.shuffleButton.click();\n    }\n\n    getLoopStatus () {\n        if (this.isControlAvailable(this.controls.loopPlaylistButton) &&\n          this.isActionPressed(this.controls.loopPlaylistButton))\n            return LoopStatus.PLAYLIST;\n        else\n            return super.getLoopStatus();\n    }\n\n    setLoopStatus (status) {\n        if (this.isControlAvailable(this.controls.loopPlaylistButton)) {\n            if (status === LoopStatus.PLAYLIST) {\n                if (!this.isActionPressed(this.controls.loopPlaylistButton))\n                    this.controls.loopPlaylistButton.click();\n            } else {\n                if (this.isActionPressed(this.controls.loopPlaylistButton))\n                    this.controls.loopPlaylistButton.click();\n                super.setLoopStatus(status);\n            }\n        } else\n            super.setLoopStatus(status);\n    }\n\n    canGoNext () {\n        return !this.isButtonDisabled(this.controls.nextButton);\n    }\n\n    canGoPrevious () {\n        return !this.isButtonDisabled(this.controls.previousButton);\n    }\n\n    next () {\n        if (!this.isButtonDisabled(this.controls.nextButton))\n            this.controls.nextButton.click();\n    }\n\n    previous () {\n        if (!this.isButtonDisabled(this.controls.previousButton))\n            this.controls.previousButton.click();\n    }\n\n    /**\n     *\n     * @param {HTMLElement} button\n     * @returns {boolean}\n     */\n    isActionPressed (button) {\n        return button.firstElementChild.getAttribute('aria-pressed') === 'true';\n    }\n\n    /**\n     *\n     * @param {HTMLElement} button\n     * @returns {*|string}\n     */\n    isButtonDisabled (button) {\n        return !button || button.getAttribute('aria-disabled') === 'true';\n    }\n\n    /**\n     *\n     * @param {HTMLElement} element\n     * @returns {boolean}\n     */\n    isControlAvailable (element) {\n        return !!(element && element.offsetParent);\n    }\n}\n\nPlayback = YouTubePlayback;\n\n/**\n * YouTube Page\n */\nclass YouTubePage extends Page {\n\n    registerPlayer (element) {\n        if (this.players.find(player => player.element === element)) {\n            return;\n        }\n\n        let player = new Player(this, this.host, element);\n\n        this.players.push(player);\n\n        let container = element.parentElement.parentElement;\n\n        this.playback.controls = {\n            ...this.playback.controls,\n            nextButton: (container || document).querySelector('.ytp-next-button'),\n            previousButton: (container || document).querySelector('.ytp-prev-button'),\n            volumeButton: (container || document).querySelector('.ytp-mute-button.ytp-button'),\n            volumeHandle: (container || document).querySelector('.ytp-volume-slider-handle')\n        };\n\n        // Ignore short sounds, they are most likely a chat notification sound\n        // but still allow when undetermined (e.g. video stream)\n        if (player.isPlaying() && !(isNaN(element.duration) || (element.duration > 0 && element.duration < 5))) {\n            this.setActivePlayer(player);\n        }\n    }\n\n}\n\nPage = YouTubePage;\n\n/*\n    for youtube we need to listen for yt-page-data-updated\n    we subscribe to mpris2-setup to make sure page is defined\n */\nwindow.addEventListener('mpris2-setup', () => {\n    window.addEventListener('yt-page-data-updated', function () {\n        let playlistActionsButtons = document.querySelectorAll('#playlist-actions a');\n\n        playlistActionsButtons.forEach(each => {\n            page.observeForChanges(each.firstElementChild, {\n                attributeFilter: ['aria-pressed']\n            });\n        });\n\n        page.playback.controls = {\n            ...page.playback.controls,\n            shuffleButton: playlistActionsButtons[1],\n            loopPlaylistButton: playlistActionsButtons[0]\n        };\n\n        document.querySelectorAll('video,audio')\n          .forEach(player => page.registerPlayer(player));\n\n        if (page.getActivePlayer()) {\n            if (page.getActivePlayer().isHidden() && !page.getActivePlayer().isPlaying())\n                page.host.quit(page.getActivePlayer());\n            else\n                page.host.start(page.getActivePlayer());\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/Lt-Mayonesa/browser-mpris2/src/browser/providers/youtube.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 267,
    "kind": "class",
    "name": "YouTubePlayer",
    "memberof": "src/browser/providers/youtube.js",
    "static": true,
    "longname": "src/browser/providers/youtube.js~YouTubePlayer",
    "access": "public",
    "export": false,
    "importPath": "browser-mpris2/src/browser/providers/youtube.js",
    "importStyle": null,
    "description": "The metadata sent to the mpris host is defined\nby the {@link Player} implementation\n\nFor youtube we get:\n - the song title from the html\n - the artist from the uploader\n - the cover image from the static resource of the thumbnail",
    "lineNumber": 21,
    "interface": false,
    "extends": [
      "Player"
    ]
  },
  {
    "__docId__": 268,
    "kind": "method",
    "name": "getId",
    "memberof": "src/browser/providers/youtube.js~YouTubePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/youtube.js~YouTubePlayer#getId",
    "access": "public",
    "description": "A youtube video can have 4 different baseURLs\n\n1. /watch?v=ID_OF_VIDEO - when watching the default way\n2. /embed/ID_OF_VIDEO - when it is embedded on a different site\n3. /user/nprmusic - when in a users page\n4. /channel/UCC6mthPyZTpbk-Klz9RMxMw - when in a channels page\n\nIn cases 3 and 4 we don't have a way to figure out it's video id\nso the player id will be the full URL",
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 269,
    "kind": "method",
    "name": "getTitle",
    "memberof": "src/browser/providers/youtube.js~YouTubePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/youtube.js~YouTubePlayer#getTitle",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 270,
    "kind": "method",
    "name": "getArtists",
    "memberof": "src/browser/providers/youtube.js~YouTubePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/youtube.js~YouTubePlayer#getArtists",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 271,
    "kind": "method",
    "name": "getCover",
    "memberof": "src/browser/providers/youtube.js~YouTubePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/youtube.js~YouTubePlayer#getCover",
    "access": "public",
    "description": "If we couldn't figure out the video id (see {@link getId})\nthen the player's id will be the element's baseURI, if that's the case\nwe won't be able to get the thumbnail. so call super",
    "lineNumber": 62,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 272,
    "kind": "class",
    "name": "YouTubePlayback",
    "memberof": "src/browser/providers/youtube.js",
    "static": true,
    "longname": "src/browser/providers/youtube.js~YouTubePlayback",
    "access": "public",
    "export": false,
    "importPath": "browser-mpris2/src/browser/providers/youtube.js",
    "importStyle": null,
    "description": "YouTube Playback",
    "lineNumber": 74,
    "interface": false,
    "extends": [
      "Playback"
    ]
  },
  {
    "__docId__": 273,
    "kind": "method",
    "name": "setRate",
    "memberof": "src/browser/providers/youtube.js~YouTubePlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/youtube.js~YouTubePlayback#setRate",
    "access": "public",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "params": [
      {
        "name": "rate",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 274,
    "kind": "method",
    "name": "setVolume",
    "memberof": "src/browser/providers/youtube.js~YouTubePlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/youtube.js~YouTubePlayback#setVolume",
    "access": "public",
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "params": [
      {
        "name": "volume",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 275,
    "kind": "method",
    "name": "isShuffle",
    "memberof": "src/browser/providers/youtube.js~YouTubePlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/youtube.js~YouTubePlayback#isShuffle",
    "access": "public",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 276,
    "kind": "method",
    "name": "setShuffle",
    "memberof": "src/browser/providers/youtube.js~YouTubePlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/youtube.js~YouTubePlayback#setShuffle",
    "access": "public",
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "params": [
      {
        "name": "isShuffle",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 277,
    "kind": "method",
    "name": "getLoopStatus",
    "memberof": "src/browser/providers/youtube.js~YouTubePlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/youtube.js~YouTubePlayback#getLoopStatus",
    "access": "public",
    "description": null,
    "lineNumber": 125,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 278,
    "kind": "method",
    "name": "setLoopStatus",
    "memberof": "src/browser/providers/youtube.js~YouTubePlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/youtube.js~YouTubePlayback#setLoopStatus",
    "access": "public",
    "description": null,
    "lineNumber": 133,
    "undocument": true,
    "params": [
      {
        "name": "status",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 279,
    "kind": "method",
    "name": "canGoNext",
    "memberof": "src/browser/providers/youtube.js~YouTubePlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/youtube.js~YouTubePlayback#canGoNext",
    "access": "public",
    "description": null,
    "lineNumber": 147,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 280,
    "kind": "method",
    "name": "canGoPrevious",
    "memberof": "src/browser/providers/youtube.js~YouTubePlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/youtube.js~YouTubePlayback#canGoPrevious",
    "access": "public",
    "description": null,
    "lineNumber": 151,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 281,
    "kind": "method",
    "name": "next",
    "memberof": "src/browser/providers/youtube.js~YouTubePlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/youtube.js~YouTubePlayback#next",
    "access": "public",
    "description": null,
    "lineNumber": 155,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 282,
    "kind": "method",
    "name": "previous",
    "memberof": "src/browser/providers/youtube.js~YouTubePlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/youtube.js~YouTubePlayback#previous",
    "access": "public",
    "description": null,
    "lineNumber": 160,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 283,
    "kind": "method",
    "name": "isActionPressed",
    "memberof": "src/browser/providers/youtube.js~YouTubePlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/youtube.js~YouTubePlayback#isActionPressed",
    "access": "public",
    "description": "",
    "lineNumber": 170,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "button",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 284,
    "kind": "method",
    "name": "isButtonDisabled",
    "memberof": "src/browser/providers/youtube.js~YouTubePlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/youtube.js~YouTubePlayback#isButtonDisabled",
    "access": "public",
    "description": "",
    "lineNumber": 179,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*|string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "button",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*",
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 285,
    "kind": "method",
    "name": "isControlAvailable",
    "memberof": "src/browser/providers/youtube.js~YouTubePlayback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/youtube.js~YouTubePlayback#isControlAvailable",
    "access": "public",
    "description": "",
    "lineNumber": 188,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 286,
    "kind": "class",
    "name": "YouTubePage",
    "memberof": "src/browser/providers/youtube.js",
    "static": true,
    "longname": "src/browser/providers/youtube.js~YouTubePage",
    "access": "public",
    "export": false,
    "importPath": "browser-mpris2/src/browser/providers/youtube.js",
    "importStyle": null,
    "description": "YouTube Page",
    "lineNumber": 198,
    "interface": false,
    "extends": [
      "Page"
    ]
  },
  {
    "__docId__": 287,
    "kind": "method",
    "name": "registerPlayer",
    "memberof": "src/browser/providers/youtube.js~YouTubePage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/browser/providers/youtube.js~YouTubePage#registerPlayer",
    "access": "public",
    "description": null,
    "lineNumber": 200,
    "undocument": true,
    "params": [
      {
        "name": "element",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "kind": "index",
    "content": "# browser-mpris2\n[![Build Status](https://travis-ci.org/Lt-Mayonesa/browser-mpris2.svg?branch=master)](https://travis-ci.org/Lt-Mayonesa/browser-mpris2)\n\nImplements the MPRIS2 interface for Chrome and Firefox.\n\nCurrently, all sites should be supported with reduced capabilities (play, pause, stop, volume, seek, cover art).\n\nAnd the following sites are supported with almost all of the capabilities MPRIS2 allows:\n* [YouTube](https://lt-mayonesa.github.io/browser-mpris2/manual/youtube.html)\n* [YouTube Music](https://lt-mayonesa.github.io/browser-mpris2/manual/youtube-music.html)\n* [SoundCloud](https://lt-mayonesa.github.io/browser-mpris2/manual/soundcloud.html)\n* [Netflix](https://lt-mayonesa.github.io/browser-mpris2/manual/netflix.html)\n\nPull requests are welcome.\n\n### How it looks (linux mint)\n![players screenshot](https://raw.githubusercontent.com/Lt-Mayonesa/browser-mpris2/master/screenshot.png)\n\n## Installation\n\n### Install native app\nGo to the [latest release](https://github.com/Lt-Mayonesa/browser-mpris2/releases/latest) and download the `.deb` artifact.\n\nInstall the `.deb` file. ie:\n```bash\ndpkg -i browser-mpris2-v[latest-version]-native.deb\n```\nThis will make `browser-mpris2` from the command line available.\n\n> If not on Debian, you can grab the browser-mpris2 script from the `.zip` file. Put it somewhere in your path and then run:\n>\n> for chrome or chromium: `browser-mpris2 --init-chrome \"mcakdldkgmlakhcpdmecedogacbagdba\"`\n> \n> for firefox: `browser-mpris2 --init-firefox \"browser-mpris2@lt-mayonesa.github.io\"`\n\n### Install extension for Chrome\nThen, go to `Tools > Extensions` (or [chrome://extensions](chrome://extensions)) and enable `Developer mode`.\n\nDownload the `.crx` artifact from the [latest release](https://github.com/Lt-Mayonesa/browser-mpris2/releases/latest) and drop it on the Extensions page (if \"Drop to install\" doesn't show up try reloading the page).\n\n\n### Install extension for Firefox\n\nDownload the `.xpi` artifact from the [latest release](https://github.com/Lt-Mayonesa/browser-mpris2/releases/latest) and drop it on Firefox.\n\n[Try it](https://www.youtube.com/watch?v=QuoKNZjr8_U) (if the player is not detected try restarting your browser).\n\n\n## Powers\nIf on Cinnamon, GNOME, or similar you should be able to take advantage of your new powers immediately. Otherwise, you can use something like [playerctl](https://github.com/acrisci/playerctl), perhaps bind it to a key or `XF86AudioPlay` and the like if your keyboard has them.\n\n### Browser Shortcuts\nThe following commands can be configured as browser shortcuts (ie: in chrome go to [chrome://extensions/shortcuts](chrome://extensions/shortcuts))\n - Play\n - Pause\n - Play/Pause\n - Stop\n - Next\n - Previous\n\n## Similar Projects\n - [plasma-browser-integration](https://github.com/KDE/plasma-browser-integration)\n - [shwsh/web-mpris2](https://github.com/shwsh/web-mpris2) A port of [otommod's](https://github.com/otommod/browser-mpris2) extension to Tampermonkey/Greasemonkey (and WebSockets).\n\n## ROADMAP\n - Cinnamon's \"Launch Player\" functionality.\n - Settings: Global & Per Provider\n - Tests per provider\n - Providers:\n    - Amazon Music\n    - Google Music\n",
    "longname": "/home/travis/build/Lt-Mayonesa/browser-mpris2/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"browser-mpris2\",\n  \"version\": \"0.4.1\",\n  \"description\": \"Implements the MPRIS2 interface for Chrome and Firefox\",\n  \"main\": \"src/browser/init.js\",\n  \"directories\": {\n    \"doc\": \"docs\",\n    \"test\": \"tests\"\n  },\n  \"scripts\": {\n    \"esdoc\": \"esdoc\",\n    \"build\": \"./build.sh\",\n    \"package\": \"crx pack dist/extension -o dist/browser-mpris2-v666.crx\",\n    \"test\": \"karma start\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/Lt-Mayonesa/browser-mpris2.git\"\n  },\n  \"keywords\": [\n    \"mpris2\",\n    \"chrome\",\n    \"firefox\"\n  ],\n  \"author\": \"lt-mayonesa\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/Lt-Mayonesa/browser-mpris2/issues\"\n  },\n  \"homepage\": \"https://lt-mayonesa.github.io/browser-mpris2/\",\n  \"dependencies\": {\n    \"karma-firefox-launcher\": \"^1.2.0\"\n  },\n  \"devDependencies\": {\n    \"crx\": \"^4.0.1\",\n    \"documentjs\": \"^0.5.5\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"google-closure-compiler\": \"^20190301.0.0\",\n    \"jasmine\": \"^3.3.1\",\n    \"jasmine-core\": \"^3.4.0\",\n    \"karma\": \"^4.3.0\",\n    \"karma-chrome-launcher\": \"^2.2.0\",\n    \"karma-coverage\": \"^1.1.2\",\n    \"karma-html-reporter\": \"^0.2.7\",\n    \"karma-jasmine\": \"^2.0.1\",\n    \"karma-jasmine-html-reporter\": \"^1.4.0\",\n    \"web-ext\": \"^3.1.1\"\n  }\n}\n",
    "longname": "/home/travis/build/Lt-Mayonesa/browser-mpris2/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "content": "# About\nOut of the box this project has support for `video` and `audio` tags in all sites with the following features.\n - Play/Pause: play and pause it's playback.\n - Stop: pause the playback and go back to the start.\n - Seek: advance/go back 10 seconds.\n - Set position: indicate the desired position of playback.\n - Volume: control the medias pertinent volume.\n - Raise: show the tab that is playing the media.\n - Quit: close the tab that is playing the media.\n - Cover art: we use the sites domain to search for it's logo.\n - Looping: toggle between default playback or looping the current track.\n\n## Providers\n\nBy extending this projects base classes it is possible to modify the default interaction with each site for specific sites. We call them providers. \n\nIf you would like to contribute with a provider see the [how to](manual/how_to.html) manual.\n\n## Support\n\n| Support   | default     | YouTube           | YouTube Music | SoundCloud    | Netflix          | Spotify       |\n|-----------|-------------|-------------------|---------------|---------------|------------------|---------------|\n| Cover Art | domain logo | video's thumbnail | song's cover  | song's cover  | netflix logo     | song's cover  |\n| Title     | page title  | video's title     | song's title  | song's title  | movie/show title | song's title  |\n| Artists   | page host   | video's owner     | song's artist | song's artist | movie/show       | song's artist |\n| PlayPause | yes         | yes               | yes           | yes           | yes              | yes           |\n| Stop      | yes         | yes               | yes           | yes           | yes              | yes           |\n| Next      | no          | yes               | yes           | yes           | yes              | yes           |\n| Previous  | no          | yes               | yes           | yes           | yes              | yes           |\n| Rate      | no          | yes               | no            | no            | no               | no            |\n| Volume    | yes(no UI)  | yes               | yes           | yes           | yes              | yes           |\n| Shuffle   | no          | yes (if present)  | yes           | yes           | no               | yes           |\n| Loop      | TRACK/NONE  | full              | full          | full          | no               | full          |\n\n### Loop\nFull loop supports cycling between Playlist Loop, Track Loop, and None\n\n\n",
    "longname": "/home/travis/build/Lt-Mayonesa/browser-mpris2/manual/index.md",
    "name": "./manual/index.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/travis/build/Lt-Mayonesa/browser-mpris2/manual/how_to.md",
    "name": "./manual/how_to.md",
    "content": "# How To\nIf you would like to contribute with a provider please follow this steps.\n\n## 0. Default Works\nEnsure the media elements in the site you are interested in are detected.\n\n_if you can't control the media by default then it probably wont be solved by following this instructions._\n\n## 1. Create a provider\nCreate a .js file inside src/providers/ with then name (kebab-cased) of the site.\n\n## 2. Update manifest.json\nEdit the [manifes.json](https://github.com/Lt-Mayonesa/browser-mpris2/blob/master/manifest.json), by adding an item to the `\"content_scripts\"` array.\n1. the item's `\"js\"` property should contain the path to the file you created in the previous step\n2. the item's `\"matches\"` property should contain a valid match for the site. See [content_scripts](https://developer.chrome.com/extensions/content_scripts) for more info.\n3. ie:\n```json\n{\n  \"matches\": [\"*://*.youtube.com/*\", \"*://youtube.com/*\"],\n  \"js\": [\n    \"src/providers/youtube.js\"\n  ],\n  \"run_at\": \"document_start\",\n  \"all_frames\": true\n}\n```\n\n## 3. Write your provider\nEdit your provider's .js file by extending and re-assigning (see snippets below) any of the classes inside `src/browser/main/` as needed. \n\nYou are most likely to only need to extend any of the following three.\n\n### [Player](https://lt-mayonesa.github.io/browser-mpris2/class/src/browser/main/player.js~Player.html)\n\nBesides other things a player defines the metadata (title, artis, coverArt, length) that is sent to the mpris2 interface.\nOne page will often hold more than one `Player`, but only one of them will be the `activePlayer`.\n\n```javascript\nclass MySitePlayer extends Player {\n\n   getCover() {\n       return document.getElementById('element-holding-the-image').getAttribute('src');\n   } \n\n}\nPlayer = MySitePlayer;\n```\n\n### [Playback](https://lt-mayonesa.github.io/browser-mpris2/class/src/browser/main/playback.js~Playback.html) (singleton)\n\nThis controls the playback of the page. You should override this class in order to better interact with your site.\n\n```javascript\nclass MySitePlayback extends Playback {\n\n   setLoopStatus (status) {\n       document.getElementById('button-that-toogles-loop').click();\n   }\n\n}\nPlayback = MySitePlayback;\n```\n\n### [Page](https://lt-mayonesa.github.io/browser-mpris2/class/src/browser/main/page.js~Page.html) (singleton)\n\nA page is in charge of registering and handling media elements.\n\nIt wouldn't be strange that you don't have the need to extend this class.\n\n```javascript\n   class MySitePage extends Page {\n\n       getTitle() {\n           return document.getElementById('element-with-title').textContent;\n       }\n\n   }\n   Page = MySitePage;\n```\n\n## 4. Document it\nAdd a .md file to the `manual/` directory containing a summary of what this provider accomplishes. Don't forget to add it to the [.esdoc.json](https://github.com/Lt-Mayonesa/browser-mpris2/blob/master/manifest.json) under the plugins's `name-standard-plugin.option.manual.files` property.\n\n## 5. PR it\nGo ahead and create a pull request. They are always welcome.\n",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 288,
    "kind": "testFile",
    "name": "tests/browser/main/carrier.spec.js",
    "content": "describe('Carrier tests', () => {\n\n    /**\n     * @type {Carrier}\n     */\n    let carrier;\n\n    beforeEach(() => {\n        carrier = new Carrier();\n    });\n\n    describe('Carrier.store', () => {\n        it(\n          `Given a new payload\n          when i store it\n          then it should be the cached value`,\n          () => {\n              let payload = {\n                  data: 1\n              };\n              // noinspection JSCheckFunctionSignatures\n              carrier.store(payload);\n              expect(carrier.last).toEqual(payload);\n          }\n        );\n    });\n\n    describe('Carrier.clear', () => {\n        it(\n          `Given a stored payload\n          when i clear it\n          then the stored value should be the default`,\n          () => {\n              carrier.last = {\n                  PlaybackStatus: 'Playing',\n                  Metadata: {}\n              };\n              carrier.clear();\n              expect(carrier.last)\n                .toEqual({});\n          }\n        )\n    });\n\n    describe('Carrier.onlyUpdated', () => {\n        parameterized(\n          `given a stored payload\n          and a new payload\n          when i compare them\n          then i should get only the updated values`,\n          [\n              {\n                  stored: { 'PlaybackStatus': 'Playing' },\n                  payload: { 'PlaybackStatus': 'Paused' },\n                  expected: { 'PlaybackStatus': 'Paused' }\n              },\n              {\n                  stored: { 'PlaybackStatus': 'Playing' },\n                  payload: { 'PlaybackStatus': 'Playing' },\n                  expected: {}\n              },\n              {\n                  stored: { PlaybackStatus: 'Playing', LoopStatus: 'None' },\n                  payload: { PlaybackStatus: 'Playing', LoopStatus: 'Track' },\n                  expected: { LoopStatus: 'Track' }\n              },\n              {\n                  stored: {\n                      PlaybackStatus: 'Playing',\n                      LoopStatus: 'None',\n                      Metadata: {\n                          'mpris:length': 10\n                      }\n                  },\n                  payload: {\n                      PlaybackStatus: 'Playing',\n                      LoopStatus: 'None',\n                      Metadata: {\n                          'mpris:length': 10\n                      }\n                  },\n                  expected: {}\n              },\n              {\n                  stored: {\n                      PlaybackStatus: 'Playing',\n                      LoopStatus: 'None',\n                      Metadata: {\n                          'mpris:length': 11\n                      }\n                  },\n                  payload: {\n                      PlaybackStatus: 'Playing',\n                      LoopStatus: 'None',\n                      Metadata: {\n                          'mpris:length': 10\n                      }\n                  },\n                  expected: {\n                      Metadata: {\n                          'mpris:length': 10\n                      }\n                  }\n              },\n              {\n                  stored: {\n                      Metadata: {\n                          'xesam:artist': ['artist']\n                      }\n                  },\n                  payload: {\n                      Metadata: {\n                          'xesam:artist': ['this']\n                      }\n                  },\n                  expected: {\n                      Metadata: {\n                          'xesam:artist': ['this']\n                      }\n                  }\n              },\n              {\n                  stored: {\n                      PlaybackStatus: 'Playing',\n                      LoopStatus: 'None',\n                      Metadata: {\n                          'mpris:length': 11,\n                          'mrpis:trackid': '123'\n                      }\n                  },\n                  payload: {\n                      PlaybackStatus: 'Playing',\n                      LoopStatus: 'None',\n                      Metadata: {\n                          'mpris:length': 11,\n                          'mrpis:trackid': '124'\n                      }\n                  },\n                  expected: {\n                      Metadata: {\n                          'mpris:length': 11,\n                          'mrpis:trackid': '124'\n                      }\n                  }\n              }\n          ],\n          (params) => {\n              carrier.last = params.stored;\n              expect(carrier.onlyUpdated(params.payload))\n                .toEqual(params.expected);\n          }\n        );\n    });\n\n    describe('Carrier.payloadFrom', () => {\n        it(\n          `Given a playback\n          with an active player\n          when i build a payload\n          it should be as expected`,\n          () => {\n              let playback = new Playback();\n              playback.activePlayer = mock(Player,{\n                  isPlaying: () => true,\n                  isLooping: () => false,\n                  getVolume: () => 1,\n                  getId: () => 'id',\n                  getLength: () => 10000000,\n                  getCover: () => 'default.jpg',\n                  getUrl: () => 'http://mock.com',\n                  getTitle: () => 'my title',\n                  getArtists: () => ['artist'],\n                  getSiteDomain: () => 'http://site.com',\n                  getRate: () => 1\n              });\n\n              expect(carrier.payloadFrom(playback))\n                .toEqual({\n                    'CanGoNext': false,\n                    'CanGoPrevious': false,\n                    'Identity': 'http://site.com',\n                    'LoopStatus': 'None',\n                    'Metadata': {\n                        'mpris:artUrl': 'default.jpg',\n                        'mpris:length': 10000000,\n                        'mpris:trackid': 'id',\n                        'xesam:artist': [\n                            'artist'\n                        ],\n                        'xesam:title': 'my title',\n                        'xesam:url': 'http://mock.com',\n                    },\n                    'PlaybackStatus': 'Playing',\n                    'Rate': 1,\n                    'Shuffle': false,\n                    'Volume': 1,\n                });\n          }\n        );\n    });\n\n    describe('Carrier.requestPayload', () => {\n        it(\n          `given store it`,\n          () => {\n              carrier.last = {\n                  'CanGoNext': false,\n                  'CanGoPrevious': false,\n                  'Identity': 'http://site.com',\n                  'LoopStatus': 'None',\n                  'Metadata': {\n                      'mpris:artUrl': 'default.jpg',\n                      'mpris:length': 10000000,\n                      'mpris:trackid': 'id',\n                      'xesam:artist': [\n                          'artist'\n                      ],\n                      'xesam:title': 'my title',\n                      'xesam:url': 'http://mock.com',\n                  },\n                  'PlaybackStatus': 'Playing',\n                  'Rate': 1,\n                  'Shuffle': false,\n                  'Volume': 1,\n              };\n              let playback = new Playback();\n              playback.activePlayer = mock(Player,{\n                  isPlaying: () => true,\n                  isLooping: () => false,\n                  getVolume: () => 1,\n                  getId: () => 'id',\n                  getLength: () => 10000000,\n                  getCover: () => 'default.jpg',\n                  getUrl: () => 'http://mock.com',\n                  getTitle: () => 'my title',\n                  getArtists: () => ['artist'],\n                  getSiteDomain: () => 'http://site.com',\n                  getRate: () => 1\n              });\n              expect(carrier.requestPayload(playback))\n                .toEqual({});\n              expect(carrier.last).toEqual({\n                  'CanGoNext': false,\n                  'CanGoPrevious': false,\n                  'Identity': 'http://site.com',\n                  'LoopStatus': 'None',\n                  'Metadata': {\n                      'mpris:artUrl': 'default.jpg',\n                      'mpris:length': 10000000,\n                      'mpris:trackid': 'id',\n                      'xesam:artist': [\n                          'artist'\n                      ],\n                      'xesam:title': 'my title',\n                      'xesam:url': 'http://mock.com',\n                  },\n                  'PlaybackStatus': 'Playing',\n                  'Rate': 1,\n                  'Shuffle': false,\n                  'Volume': 1,\n              });\n          }\n        )\n    });\n\n});\n",
    "static": true,
    "longname": "/home/travis/build/Lt-Mayonesa/browser-mpris2/tests/browser/main/carrier.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 289,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "tests/browser/main/carrier.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/browser/main/carrier.spec.js~describe0",
    "access": null,
    "description": "Carrier tests",
    "lineNumber": 1
  },
  {
    "__docId__": 290,
    "kind": "test",
    "name": "describe1",
    "testId": 1,
    "memberof": "tests/browser/main/carrier.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "tests/browser/main/carrier.spec.js~describe0.describe1",
    "access": null,
    "description": "Carrier.store",
    "lineNumber": 12
  },
  {
    "__docId__": 291,
    "kind": "test",
    "name": "it2",
    "testId": 2,
    "memberof": "tests/browser/main/carrier.spec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "tests/browser/main/carrier.spec.js~describe0.describe1.it2",
    "access": null,
    "lineNumber": 13
  },
  {
    "__docId__": 292,
    "kind": "test",
    "name": "describe3",
    "testId": 3,
    "memberof": "tests/browser/main/carrier.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "tests/browser/main/carrier.spec.js~describe0.describe3",
    "access": null,
    "description": "Carrier.clear",
    "lineNumber": 28
  },
  {
    "__docId__": 293,
    "kind": "test",
    "name": "it4",
    "testId": 4,
    "memberof": "tests/browser/main/carrier.spec.js~describe0.describe3",
    "testDepth": 2,
    "static": true,
    "longname": "tests/browser/main/carrier.spec.js~describe0.describe3.it4",
    "access": null,
    "lineNumber": 29
  },
  {
    "__docId__": 294,
    "kind": "test",
    "name": "describe5",
    "testId": 5,
    "memberof": "tests/browser/main/carrier.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "tests/browser/main/carrier.spec.js~describe0.describe5",
    "access": null,
    "description": "Carrier.onlyUpdated",
    "lineNumber": 45
  },
  {
    "__docId__": 295,
    "kind": "test",
    "name": "describe6",
    "testId": 6,
    "memberof": "tests/browser/main/carrier.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "tests/browser/main/carrier.spec.js~describe0.describe6",
    "access": null,
    "description": "Carrier.payloadFrom",
    "lineNumber": 155
  },
  {
    "__docId__": 296,
    "kind": "test",
    "name": "it7",
    "testId": 7,
    "memberof": "tests/browser/main/carrier.spec.js~describe0.describe6",
    "testDepth": 2,
    "static": true,
    "longname": "tests/browser/main/carrier.spec.js~describe0.describe6.it7",
    "access": null,
    "lineNumber": 156
  },
  {
    "__docId__": 297,
    "kind": "test",
    "name": "describe8",
    "testId": 8,
    "memberof": "tests/browser/main/carrier.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "tests/browser/main/carrier.spec.js~describe0.describe8",
    "access": null,
    "description": "Carrier.requestPayload",
    "lineNumber": 202
  },
  {
    "__docId__": 298,
    "kind": "test",
    "name": "it9",
    "testId": 9,
    "memberof": "tests/browser/main/carrier.spec.js~describe0.describe8",
    "testDepth": 2,
    "static": true,
    "longname": "tests/browser/main/carrier.spec.js~describe0.describe8.it9",
    "access": null,
    "lineNumber": 203
  },
  {
    "__docId__": 299,
    "kind": "testFile",
    "name": "tests/browser/main/host.spec.js",
    "content": "describe('Host tests', () => {\n\n    /**\n     * @type {Host}\n     */\n    let host;\n\n    beforeEach(() => {\n        host = new Host(\n          mock(Playback),\n          mock(Carrier),\n          {\n              onMessage: {\n                  addListener () {}\n              }\n          }\n        );\n    });\n\n    describe('Host.get', () => {\n\n        it(\n          `Given a GET request\n          when it is for the position\n          it should the playback's position\n          `,\n          () => {\n              host.playback.getPosition = () => 10;\n\n              expect(host.get('id', 'Position'))\n                .toBe(10);\n          }\n        );\n\n    });\n\n    describe('Host.set', () => {\n\n        parameterized(\n          `Given a SET request\n          when it's the $propName\n          then the playback $propName should be set`,\n          [\n              { method: 'setRate', propName: 'Rate', newValue: 10 },\n              { method: 'setVolume', propName: 'Volume', newValue: 10 },\n              { method: 'setShuffle', propName: 'Shuffle', newValue: true },\n              { method: 'setShuffle', propName: 'Shuffle', newValue: false },\n              { method: 'setLoopStatus', propName: 'LoopStatus', newValue: 'Track' },\n              { method: 'setLoopStatus', propName: 'LoopStatus', newValue: 'Playlist' },\n              { method: 'setLoopStatus', propName: 'LoopStatus', newValue: 'None' },\n              { method: 'toggleFullScreen', propName: 'Fullscreen' },\n              { method: 'toggleFullScreen', propName: 'Fullscreen' }\n          ],\n          (params) => {\n              let spy = spyOn(host.playback, params.method);\n              if (params.newValue)\n                  spy.withArgs(params.newValue);\n              host.set('id', params.propName, params.newValue);\n              expect(spy).toHaveBeenCalledTimes(1);\n          }\n        );\n\n    });\n\n    describe('Host.command', () => {\n\n        parameterized(\n          `Given a COMMAND request\n          when it's the $command\n          then the playback $method should called`,\n          [\n              { method: 'play', command: 'Play' },\n              { method: 'pause', command: 'Pause' },\n              { method: 'togglePlayback', command: 'PlayPause' },\n              { method: 'stop', command: 'Stop' },\n              { method: 'next', command: 'Next' },\n              { method: 'previous', command: 'Previous' },\n              { method: 'seek', command: 'Seek', args: [10000] },\n              { method: 'setPosition', command: 'SetPosition', args: ['id', 10000] }\n          ],\n          (params) => {\n              let spy = spyOn(host.playback, params.method);\n              if (params.args) {\n                  spy.withArgs(...params.args);\n                  host.command(params.command, ...params.args);\n              } else\n                  host.command(params.command);\n              expect(spy).toHaveBeenCalledTimes(1);\n          }\n        );\n\n    });\n\n    describe('Host.messageListener', () => {\n        parameterized(\n          `Given a request\n          with a method $method\n          when the port sends a message\n          then redirect correctly\n          and return a message if expected`,\n          [\n              { method: 'Get', redirect: 'get', ret: 1, result: 1 },\n              { method: 'Set', redirect: 'set', ret: 1 },\n              { method: 'Play', redirect: 'command', ret: 1 },\n              { method: 'Pause', redirect: 'command', ret: 1 },\n              { method: 'PlayPause', redirect: 'command', ret: 1 },\n              { method: 'Stop', redirect: 'command', ret: 1 },\n              { method: 'Next', redirect: 'command', ret: 1 },\n              { method: 'Previous', redirect: 'command', ret: 1 },\n              { method: 'Seek', redirect: 'command', ret: 1 },\n              { method: 'SetPosition', redirect: 'command', ret: 1 }\n          ],\n          (params) => {\n              let spy = spyOn(host, params.redirect);\n              spy.and.returnValue(params.result);\n              let retSpy = spyOn(host, 'return');\n\n              host.messageListener({\n                  method: params.method,\n                  args: []\n              });\n\n              expect(spy).toHaveBeenCalled();\n              expect(retSpy).toHaveBeenCalledTimes(params.ret);\n          }\n        );\n    });\n\n});\n",
    "static": true,
    "longname": "/home/travis/build/Lt-Mayonesa/browser-mpris2/tests/browser/main/host.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 300,
    "kind": "test",
    "name": "describe10",
    "testId": 10,
    "memberof": "tests/browser/main/host.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/browser/main/host.spec.js~describe10",
    "access": null,
    "description": "Host tests",
    "lineNumber": 1
  },
  {
    "__docId__": 301,
    "kind": "test",
    "name": "describe11",
    "testId": 11,
    "memberof": "tests/browser/main/host.spec.js~describe10",
    "testDepth": 1,
    "static": true,
    "longname": "tests/browser/main/host.spec.js~describe10.describe11",
    "access": null,
    "description": "Host.get",
    "lineNumber": 20
  },
  {
    "__docId__": 302,
    "kind": "test",
    "name": "it12",
    "testId": 12,
    "memberof": "tests/browser/main/host.spec.js~describe10.describe11",
    "testDepth": 2,
    "static": true,
    "longname": "tests/browser/main/host.spec.js~describe10.describe11.it12",
    "access": null,
    "lineNumber": 22
  },
  {
    "__docId__": 303,
    "kind": "test",
    "name": "describe13",
    "testId": 13,
    "memberof": "tests/browser/main/host.spec.js~describe10",
    "testDepth": 1,
    "static": true,
    "longname": "tests/browser/main/host.spec.js~describe10.describe13",
    "access": null,
    "description": "Host.set",
    "lineNumber": 37
  },
  {
    "__docId__": 304,
    "kind": "test",
    "name": "describe14",
    "testId": 14,
    "memberof": "tests/browser/main/host.spec.js~describe10",
    "testDepth": 1,
    "static": true,
    "longname": "tests/browser/main/host.spec.js~describe10.describe14",
    "access": null,
    "description": "Host.command",
    "lineNumber": 65
  },
  {
    "__docId__": 305,
    "kind": "test",
    "name": "describe15",
    "testId": 15,
    "memberof": "tests/browser/main/host.spec.js~describe10",
    "testDepth": 1,
    "static": true,
    "longname": "tests/browser/main/host.spec.js~describe10.describe15",
    "access": null,
    "description": "Host.messageListener",
    "lineNumber": 94
  },
  {
    "__docId__": 306,
    "kind": "testFile",
    "name": "tests/browser/main/page.spec.js",
    "content": "describe('Page tests', () => {\n\n    /**\n     * @type {Host}\n     */\n    let host;\n    /**\n     * @type {Playback}\n     */\n    let playback;\n    /**\n     * @type {Page}\n     */\n    let page;\n\n    beforeEach(() => {\n        host = mock(Host);\n        playback = mock(Playback);\n\n        page = new Page(null, playback, host);\n    });\n\n    describe('Page.registerPlayer', () => {\n        it(\n          `Given a new page\n      and a new element\n      when i register the element\n      then it should be added to the list`,\n          () => {\n              let element = mock(HTMLMediaElement);\n              element.baseURI = 'http://mock.com';\n              element.duration = 100000;\n              element.paused = true;\n\n              expect(page.registerPlayer(element)).toBe(true);\n              expect(page.players[0].element).toEqual(element);\n          }\n        );\n        it(\n          `Given a new element\n      that is playing\n      when i register the element\n      then it should be added to the list`,\n          () => {\n              let spy = spyOn(host, 'start');\n\n              let element = mock(HTMLMediaElement);\n              element.baseURI = 'http://mock.com';\n              element.duration = 100000;\n              element.paused = false;\n\n              expect(page.registerPlayer(element)).toBe(true);\n              expect(spy).toHaveBeenCalled();\n              expect(page.players[0].element).toEqual(element);\n          }\n        );\n        it(\n          `Given a new page\n      with an element\n      when i register the element\n      then it should not be added to the list`,\n          () => {\n              let element = mock(HTMLMediaElement);\n              element.baseURI = 'http://mock.com';\n\n              page.players = [new Player(page, host, element)];\n\n              expect(page.registerPlayer(element)).toBe(false);\n              expect(page.players[0].element).toEqual(element);\n          }\n        );\n    });\n\n    describe('page.onMutate', () => {\n\n        let elements = [\n            mock(HTMLElement, { querySelectorAll: () => [] }),\n            mock(HTMLMediaElement, {\n                baseURI: 'http://mock.com',\n                matches: () => true,\n                querySelectorAll: () => []\n            }),\n            mock(HTMLMediaElement, {\n                baseURI: 'http://mock2.com',\n                matches: () => true,\n                querySelectorAll: () => []\n            }),\n            mock(HTMLElement, {\n                querySelectorAll: () => [\n                    elements[1],\n                    elements[2]\n                ]\n            })\n        ];\n\n        parameterized(\n          `Given a page\n          when elements are added to the dom\n          then all the players present should be registered`,\n          [\n              { elements: [], times: 0 },\n              { elements: [elements[0]], times: 0 },\n              {\n                  elements: [\n                      { matches: () => null, querySelectorAll: () => [] }\n                  ], times: 0\n              },\n              {\n                  elements: [\n                      Object.assign(elements[1], { querySelectorAll: () => [elements[1]] })\n                  ], times: 1\n              },\n              {\n                  elements: [\n                      elements[1],\n                      elements[2]\n                  ], times: 2\n              },\n              {\n                  elements: [\n                      elements[3]\n                  ],\n                  times: 2\n              }\n          ],\n          (params) => {\n              let mutations = [\n                  {\n                      addedNodes: params.elements\n                  }\n\n              ];\n\n              const spy = spyOn(page, 'registerPlayer');\n\n              page.onMutate(mutations);\n\n              expect(spy).toHaveBeenCalledTimes(params.times);\n              // expect(page.players.length).toBeGreaterThanOrEqual(params.times);\n          }\n        );\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/Lt-Mayonesa/browser-mpris2/tests/browser/main/page.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 307,
    "kind": "test",
    "name": "describe16",
    "testId": 16,
    "memberof": "tests/browser/main/page.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/browser/main/page.spec.js~describe16",
    "access": null,
    "description": "Page tests",
    "lineNumber": 1
  },
  {
    "__docId__": 308,
    "kind": "test",
    "name": "describe17",
    "testId": 17,
    "memberof": "tests/browser/main/page.spec.js~describe16",
    "testDepth": 1,
    "static": true,
    "longname": "tests/browser/main/page.spec.js~describe16.describe17",
    "access": null,
    "description": "Page.registerPlayer",
    "lineNumber": 23
  },
  {
    "__docId__": 309,
    "kind": "test",
    "name": "it18",
    "testId": 18,
    "memberof": "tests/browser/main/page.spec.js~describe16.describe17",
    "testDepth": 2,
    "static": true,
    "longname": "tests/browser/main/page.spec.js~describe16.describe17.it18",
    "access": null,
    "lineNumber": 24
  },
  {
    "__docId__": 310,
    "kind": "test",
    "name": "it19",
    "testId": 19,
    "memberof": "tests/browser/main/page.spec.js~describe16.describe17",
    "testDepth": 2,
    "static": true,
    "longname": "tests/browser/main/page.spec.js~describe16.describe17.it19",
    "access": null,
    "lineNumber": 39
  },
  {
    "__docId__": 311,
    "kind": "test",
    "name": "it20",
    "testId": 20,
    "memberof": "tests/browser/main/page.spec.js~describe16.describe17",
    "testDepth": 2,
    "static": true,
    "longname": "tests/browser/main/page.spec.js~describe16.describe17.it20",
    "access": null,
    "lineNumber": 57
  },
  {
    "__docId__": 312,
    "kind": "test",
    "name": "describe21",
    "testId": 21,
    "memberof": "tests/browser/main/page.spec.js~describe16",
    "testDepth": 1,
    "static": true,
    "longname": "tests/browser/main/page.spec.js~describe16.describe21",
    "access": null,
    "description": "page.onMutate",
    "lineNumber": 74
  },
  {
    "__docId__": 313,
    "kind": "testFile",
    "name": "tests/browser/main/playback.spec.js",
    "content": "describe('Playback tests', () => {\n\n    /**\n     * @type {Playback}\n     */\n    let playback;\n\n    beforeEach(() => {\n        playback = new Playback();\n    });\n\n    describe('Playback.getStatus', () => {\n\n        beforeEach(() => {\n            playback.activePlayer = mock(Player);\n        });\n\n        it(\n          `Given an active player\n          that is paused\n          when i get the status\n          the it should be Paused`,\n          () => {\n              playback.activePlayer.isPlaying = () => false;\n              expect(playback.getStatus())\n                .toEqual('Paused');\n          }\n        );\n\n        it(\n          `Given an active player\n          that is playing\n          when i get the status\n          the it should be Playing`,\n          () => {\n              playback.activePlayer.isPlaying = () => true;\n              expect(playback.getStatus())\n                .toEqual('Playing');\n          }\n        );\n    });\n\n    describe('Playback.setLoopStatus', () => {\n        beforeEach(() => {\n            playback.activePlayer = mock(Player);\n            playback.activePlayer.setLoop = function (loop) {\n                this.loop = loop;\n            };\n        });\n\n        parameterized(\n          `Given an active player\n          when i set the loop status to $status\n          then the player's loop property should be $loop`,\n          [\n              { status: 'Playlist', loop: true },\n              { status: 'Track', loop: true },\n              { status: 'None', loop: false }\n          ],\n          (params) => {\n              playback.setLoopStatus(params.status);\n              expect(playback.activePlayer.loop).toBe(params.loop);\n          }\n        );\n    });\n\n    describe('Playback.getLoopStatus', () => {\n        beforeEach(() => {\n            playback.activePlayer = mock(Player);\n        });\n\n        parameterized(\n          `Given an active player\n          with loop = $loop\n          when i get the loop status\n          the it should be $status`,\n          [\n              { status: 'Track', loop: true },\n              { status: 'None', loop: false }\n          ],\n          (params) => {\n              playback.activePlayer.isLooping = () => params.loop;\n              expect(playback.getLoopStatus())\n                .toEqual(params.status);\n          }\n        );\n    });\n\n    describe('Playback.setActivePlayer', () => {\n\n        it(\n          `Given a valid player\n        when i set it as active\n        it should be the playbacks active player`,\n          () => {\n              let player = mock(Player);\n              player.isValid = () => true;\n\n              playback.setActivePlayer(player);\n              expect(playback.activePlayer).toEqual(player);\n          });\n\n        it(\n          `Given an invalid player\n        when i set it as active\n        it should not be set as the playbacks active player`,\n          () => {\n              let player = mock(Player);\n              player.isValid = () => false;\n\n              playback.setActivePlayer(player);\n              expect(playback.activePlayer).toBe(null);\n          });\n\n    });\n\n});\n",
    "static": true,
    "longname": "/home/travis/build/Lt-Mayonesa/browser-mpris2/tests/browser/main/playback.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 314,
    "kind": "test",
    "name": "describe22",
    "testId": 22,
    "memberof": "tests/browser/main/playback.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/browser/main/playback.spec.js~describe22",
    "access": null,
    "description": "Playback tests",
    "lineNumber": 1
  },
  {
    "__docId__": 315,
    "kind": "test",
    "name": "describe23",
    "testId": 23,
    "memberof": "tests/browser/main/playback.spec.js~describe22",
    "testDepth": 1,
    "static": true,
    "longname": "tests/browser/main/playback.spec.js~describe22.describe23",
    "access": null,
    "description": "Playback.getStatus",
    "lineNumber": 12
  },
  {
    "__docId__": 316,
    "kind": "test",
    "name": "it24",
    "testId": 24,
    "memberof": "tests/browser/main/playback.spec.js~describe22.describe23",
    "testDepth": 2,
    "static": true,
    "longname": "tests/browser/main/playback.spec.js~describe22.describe23.it24",
    "access": null,
    "lineNumber": 18
  },
  {
    "__docId__": 317,
    "kind": "test",
    "name": "it25",
    "testId": 25,
    "memberof": "tests/browser/main/playback.spec.js~describe22.describe23",
    "testDepth": 2,
    "static": true,
    "longname": "tests/browser/main/playback.spec.js~describe22.describe23.it25",
    "access": null,
    "lineNumber": 30
  },
  {
    "__docId__": 318,
    "kind": "test",
    "name": "describe26",
    "testId": 26,
    "memberof": "tests/browser/main/playback.spec.js~describe22",
    "testDepth": 1,
    "static": true,
    "longname": "tests/browser/main/playback.spec.js~describe22.describe26",
    "access": null,
    "description": "Playback.setLoopStatus",
    "lineNumber": 43
  },
  {
    "__docId__": 319,
    "kind": "test",
    "name": "describe27",
    "testId": 27,
    "memberof": "tests/browser/main/playback.spec.js~describe22",
    "testDepth": 1,
    "static": true,
    "longname": "tests/browser/main/playback.spec.js~describe22.describe27",
    "access": null,
    "description": "Playback.getLoopStatus",
    "lineNumber": 67
  },
  {
    "__docId__": 320,
    "kind": "test",
    "name": "describe28",
    "testId": 28,
    "memberof": "tests/browser/main/playback.spec.js~describe22",
    "testDepth": 1,
    "static": true,
    "longname": "tests/browser/main/playback.spec.js~describe22.describe28",
    "access": null,
    "description": "Playback.setActivePlayer",
    "lineNumber": 89
  },
  {
    "__docId__": 321,
    "kind": "test",
    "name": "it29",
    "testId": 29,
    "memberof": "tests/browser/main/playback.spec.js~describe22.describe28",
    "testDepth": 2,
    "static": true,
    "longname": "tests/browser/main/playback.spec.js~describe22.describe28.it29",
    "access": null,
    "lineNumber": 91
  },
  {
    "__docId__": 322,
    "kind": "test",
    "name": "it30",
    "testId": 30,
    "memberof": "tests/browser/main/playback.spec.js~describe22.describe28",
    "testDepth": 2,
    "static": true,
    "longname": "tests/browser/main/playback.spec.js~describe22.describe28.it30",
    "access": null,
    "lineNumber": 103
  },
  {
    "__docId__": 323,
    "kind": "testFile",
    "name": "tests/browser/main/player.spec.js",
    "content": "/**\n * @test {Player}\n */\ndescribe('Player tests', () => {\n\n    let page;\n    let element;\n    /**\n     * @type {Player}\n     */\n    let player;\n\n    beforeEach(() => {\n        page = {};\n\n        element = mock(HTMLMediaElement);\n        element.baseURI = 'http://mock.com';\n\n        player = new Player(page, null, element);\n    });\n\n    /**\n     * @test {Player#getId}\n     */\n    describe('Player.getId', () => {\n        it(`given a media\n        when i get the id\n        it should return the elements URI`,\n          () => expect(player.getId()).toBe('http://mock.com')\n        );\n    });\n\n    /**\n     * @test {Player#isPlaying}\n     */\n    describe('Player.isPlaying', () => {\n        parameterized(\n          `given a media with paused = $paused\n             when i check if the player is playing\n             it should be $expected`,\n          [\n              { paused: true, expected: false },\n              { paused: false, expected: true }\n          ],\n          (params) => {\n              element.paused = params.paused;\n              expect(player.isPlaying())\n                .toBe(params.expected);\n          }\n        );\n    });\n\n    /**\n     * @test {Player#getLength}\n     */\n    describe('Player.getLength', () => {\n        parameterized(\n          `given a media with duration = $duration\n             when i get the player's length\n             it should be $expected`,\n          [\n              { duration: 100, expected: 100000000 },\n              { duration: 4687, expected: 4687000000 },\n              { duration: 0, expected: 0 }\n          ],\n          (params) => {\n              element.duration = params.duration;\n              expect(player.getLength())\n                .toBe(params.expected);\n          }\n        );\n    });\n\n    /**\n     * @test {Player#getVolume}\n     */\n    describe('Player.getVolume', () => {\n        parameterized(\n          `given a media with volume = $volume\n             with muted = $muted\n             when i get the player's volume \n             it should be $expected`,\n          [\n              { volume: 1, muted: false, expected: 1 },\n              { volume: 0.4, muted: false, expected: 0.4 },\n              { volume: 1, muted: true, expected: 0 },\n              { volume: 0.4, muted: true, expected: 0 }\n          ],\n          (params) => {\n              element.volume = params.volume;\n              element.muted = params.muted;\n\n              expect(player.getVolume())\n                .toBe(params.expected);\n          }\n        );\n    });\n\n    /**\n     * @test {Player#setVolume}\n     */\n    describe('Player.setVolume', () => {\n        parameterized(\n          `given a player\n            when i set the players volume to $volume\n            then the media volume be $volume`,\n          [\n              { volume: 1 },\n              { volume: 0 },\n              { volume: 0.4 },\n              { volume: .76 },\n          ],\n          (params) => {\n              player.setVolume(params.volume);\n\n              expect(element.volume)\n                .toBe(params.volume);\n          }\n        );\n    });\n\n    /**\n     * @test {Player#setRate}\n     */\n    describe('Player.setRate', () => {\n        parameterized(\n          `given a player\n            when i set the rate to $rate\n            then the playbackRate should be $rate`,\n          [\n              { rate: 1 },\n              { rate: 0 },\n              { rate: 0.4 },\n              { rate: .76 }\n          ],\n          (params) => {\n              player.setRate(params.rate);\n\n              expect(element.playbackRate)\n                .toBe(params.rate);\n          }\n        );\n    });\n\n    /**\n     * @test {Player#getRate}\n     */\n    describe('Player.getRate', () => {\n        parameterized(\n          `given a media with playbackRate $rate\n          when i get the the player's rate\n          it should be $rate`,\n          [\n              { rate: 1 },\n              { rate: 2.0 },\n              { rate: 0.2 }\n          ],\n          (params) => {\n              element.playbackRate = params.rate;\n\n              expect(player.getRate())\n                .toBe(params.rate);\n          }\n        );\n    });\n\n    /**\n     * Test player's title integration\n     *\n     * @test {Player#getTitle}\n     */\n    describe('Player.getTitle', () => {\n        parameterized(\n          `given a page with a title $title\n          when i get the players title\n          it should equal $title`,\n          [\n              { title: 'My Site | Guau' },\n              { title: 'Youtube' },\n              { title: '/my/super/playlist' }\n          ],\n          (params) => {\n              page.getTitle = function () {\n                  return params.title;\n              };\n              expect(player.getTitle())\n                .toBe(params.title);\n          }\n        );\n    });\n\n    /**\n     * The artists are parsed correctly from the url\n     *\n     * @test {Player#getArtists}\n     */\n    describe('Player.getArtists', () => {\n        parameterized(\n          `given a media with a valid url $url\n          when i get the artists\n          it should be $artists`,\n          [\n              { url: 'http://google.com', artists: ['google.com'] },\n              { url: 'https://youtube.com/watch?v=1231230912', artists: ['youtube.com'] },\n              { url: 'http://soundcloud.com.ar/my/super/playlist', artists: ['soundcloud.com.ar'] }\n          ],\n          (params) => {\n              element.baseURI = params.url;\n              player = new Player(page, null, element);\n\n              expect(player.getArtists())\n                .toEqual(params.artists);\n          }\n        );\n    });\n\n    /**\n     * Feature:\n     *\n     * @test {Player#getCover}\n     */\n    describe('Player.getCover', () => {\n        parameterized(\n          `given a media with a valid url $url\n          when i get the player's cover\n          it should be $cover`,\n          [\n              {\n                  url: 'http://google.com',\n                  cover: 'http://logo.clearbit.com/google.com'\n              },\n              {\n                  url: 'https://youtube.com/watch?v=1231230912',\n                  cover: 'http://logo.clearbit.com/youtube.com'\n              },\n              {\n                  url: 'http://soundcloud.com.ar/my/super/playlist',\n                  cover: 'http://logo.clearbit.com/soundcloud.com.ar'\n              }\n          ],\n          (params) => {\n              element.baseURI = params.url;\n              player = new Player(page, null, element);\n\n              expect(player.getCover())\n                .toBe(params.cover);\n          }\n        );\n    });\n\n    describe('Player.getPosition', () => {\n        parameterized(\n          `given a media with currentTime $time\n          when i get the player's position\n          it should be $expected`,\n          [\n              { time: 50, expected: 50000000 },\n              { time: 4687, expected: 4687000000 },\n              { time: 0, expected: 0 }\n          ],\n          (params) => {\n              element.currentTime = params.time;\n\n              expect(player.getPosition())\n                .toBe(params.expected);\n          }\n        );\n    });\n\n    describe('Player.play', () => {\n        it(\n          `given a valid media that is paused\n          when i call play\n          it should start playing`,\n          () => {\n              element.play = function () {\n                  this.paused = false;\n                  return new Promise((resolve) => {\n                      resolve();\n                  });\n              };\n              element.paused = true;\n\n              return player.play()\n                .then(() => {\n                    expect(element.paused).toBe(false);\n                });\n          }\n        );\n    });\n\n    describe('Player.getUrl', () => {\n        parameterized(\n          `given a valid media with a url = $url\n          when i get the player's url\n          it should be $url`,\n          [\n              { url: 'http://google.com' },\n              { url: 'http://youtube.com' }\n          ],\n          (params) => {\n              element.baseURI = params.url;\n              player = new Player(page, null, element);\n\n              expect(player.getUrl())\n                .toEqual(params.url);\n          }\n        );\n    });\n\n    describe('Player.isLooping', () => {\n        parameterized(\n          `given a media with loop = $loop\n          when i check the player's looping state\n          it should be $loop`,\n          [\n              { loop: true },\n              { loop: false }\n          ],\n          (params) => {\n              element.loop = params.loop;\n\n              expect(player.isLooping()).toBe(params.loop);\n          }\n        );\n    });\n\n    describe('Player.setLoop', () => {\n        parameterized(\n          `given a player\n            when i set the players loop status to $loop\n            then the media loop status be $loop`,\n          [\n              { loop: true },\n              { loop: false }\n          ],\n          (params) => {\n              player.setLoop(params.loop);\n\n              expect(element.loop).toBe(params.loop);\n          }\n        );\n    });\n\n    describe('Player.pause', () => {\n        it(\n          `given a media that is not paused\n          when i pause the player\n          it should be paused`,\n          () => {\n              element.pause = function () {\n                  this.paused = true;\n              };\n              element.paused = false;\n\n              player.pause();\n\n              expect(element.paused).toBe(true);\n          });\n        it(\n          `given a media that is paused\n          when i pause the player\n          it should stay paused`,\n          () => {\n              element.pause = function () {\n                  this.paused = true;\n              };\n              element.paused = false;\n\n              player.pause();\n\n              expect(element.paused).toBe(true);\n          });\n    });\n\n    describe('Player.playPause', () => {\n        parameterized(\n          `given a media with paused = $paused\n          when i toggle the player\n          then playing should be $expected`,\n          [\n              { paused: true, expected: false },\n              { paused: false, expected: true }\n          ],\n          (params) => {\n              element.pause = function () {\n                  this.paused = true;\n              };\n              element.play = function () {\n                  this.paused = false;\n                  return new Promise((resolve) => {\n                      resolve();\n                  });\n              };\n              element.paused = params.paused;\n\n              player.playPause();\n\n              expect(element.paused).toBe(params.expected);\n          }\n        );\n    });\n\n    describe('Player.stop', () => {\n        parameterized(\n          `given a media with paused = $paused\n          when i stop the player\n          then paused should be $paused\n          and it's currentTime should be 0`,\n          [\n              { paused: true, expected: false },\n              { paused: false, expected: true }\n          ],\n          (params) => {\n              element.pause = function () {\n                  this.paused = true;\n              };\n              element.paused = params.paused;\n\n              player.stop();\n\n              expect(element.paused).toBe(true);\n              expect(element.currentTime).toBe(0);\n          });\n    });\n\n    describe('Player.seek', () => {\n        parameterized(\n          `given a media with currentTime = $time\n          when i seek by $offset seconds\n          then currentTime should be $expected`,\n          [\n              { time: 10, offset: 10, expected: 20 },\n              { time: 10, offset: -10, expected: 0 },\n              { time: 0, offset: 100, expected: 100 },\n              { time: 0, offset: -10, expected: -10 },\n          ],\n          (params) => {\n              element.currentTime = params.time;\n\n              player.seek(params.offset * 1e6);\n\n              expect(element.currentTime).toBe(params.expected);\n          }\n        );\n    });\n\n    describe('Player.setPosition', () => {\n        parameterized(\n          `given a media with currentTime = $time\n          when i set the position to be $position\n          then currentTime should be $expected`,\n          [\n              { time: 10, position: 10, expected: 10 },\n              { time: 10, position: 0, expected: 0 },\n              { time: 10, position: 100, expected: 100 },\n          ],\n          (params) => {\n              element.currentTime = params.time;\n\n              player.setPosition(params.position * 1e6);\n\n              expect(element.currentTime).toBe(params.expected);\n          }\n        );\n    });\n\n    describe('Player.getSiteDomain', () => {\n        parameterized(\n          `given a valid media with a url = $url\n          when i get the player's site domain\n          it should be $expected`,\n          [\n              { url: 'http://google.com', expected: 'google.com' },\n              { url: 'http://www.youtube.com', expected: 'www.youtube.com' }\n          ],\n          (params) => {\n              element.baseURI = params.url;\n              player = new Player(page, null, element);\n\n              expect(player.getSiteDomain())\n                .toEqual(params.expected);\n          }\n        );\n    });\n\n    describe('Player.isHidden', () => {\n        it(\n          `given a media with no offset parent\n          when i check if the player is hidden\n          then it should be true`,\n          () => {\n              element.offsetParent = null;\n\n              expect(player.isHidden()).toBe(true);\n          }\n        );\n\n        it(\n          `given a media with a offset parent\n          when i check if the player is hidden\n          then it should be false`,\n          () => {\n              element.offsetParent = {};\n\n              expect(player.isHidden()).toBe(false);\n          }\n        );\n    });\n\n    describe('Player.isValid', () => {\n        parameterized(\n          `given a media wit duration = $duration\n          when i check if the player is valid\n          it should be $valid`,\n          [\n              { duration: 0, valid: false },\n              { duration: NaN, valid: false },\n              { duration: 5, valid: false },\n              { duration: 6, valid: true },\n              { duration: 10000, valid: true }\n          ],\n          params => {\n              element.duration = params.duration;\n\n              expect(player.isValid()).toBe(params.valid);\n          }\n        );\n    });\n\n});\n",
    "static": true,
    "longname": "/home/travis/build/Lt-Mayonesa/browser-mpris2/tests/browser/main/player.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 324,
    "kind": "test",
    "name": "describe31",
    "testId": 31,
    "memberof": "tests/browser/main/player.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/browser/main/player.spec.js~describe31",
    "access": null,
    "description": "Player tests",
    "lineNumber": 4,
    "testTargets": [
      "Player"
    ]
  },
  {
    "__docId__": 325,
    "kind": "test",
    "name": "describe32",
    "testId": 32,
    "memberof": "tests/browser/main/player.spec.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "tests/browser/main/player.spec.js~describe31.describe32",
    "access": null,
    "description": "Player.getId",
    "lineNumber": 25,
    "testTargets": [
      "Player#getId"
    ]
  },
  {
    "__docId__": 326,
    "kind": "test",
    "name": "it33",
    "testId": 33,
    "memberof": "tests/browser/main/player.spec.js~describe31.describe32",
    "testDepth": 2,
    "static": true,
    "longname": "tests/browser/main/player.spec.js~describe31.describe32.it33",
    "access": null,
    "lineNumber": 26
  },
  {
    "__docId__": 327,
    "kind": "test",
    "name": "describe34",
    "testId": 34,
    "memberof": "tests/browser/main/player.spec.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "tests/browser/main/player.spec.js~describe31.describe34",
    "access": null,
    "description": "Player.isPlaying",
    "lineNumber": 36,
    "testTargets": [
      "Player#isPlaying"
    ]
  },
  {
    "__docId__": 328,
    "kind": "test",
    "name": "describe35",
    "testId": 35,
    "memberof": "tests/browser/main/player.spec.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "tests/browser/main/player.spec.js~describe31.describe35",
    "access": null,
    "description": "Player.getLength",
    "lineNumber": 56,
    "testTargets": [
      "Player#getLength"
    ]
  },
  {
    "__docId__": 329,
    "kind": "test",
    "name": "describe36",
    "testId": 36,
    "memberof": "tests/browser/main/player.spec.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "tests/browser/main/player.spec.js~describe31.describe36",
    "access": null,
    "description": "Player.getVolume",
    "lineNumber": 77,
    "testTargets": [
      "Player#getVolume"
    ]
  },
  {
    "__docId__": 330,
    "kind": "test",
    "name": "describe37",
    "testId": 37,
    "memberof": "tests/browser/main/player.spec.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "tests/browser/main/player.spec.js~describe31.describe37",
    "access": null,
    "description": "Player.setVolume",
    "lineNumber": 102,
    "testTargets": [
      "Player#setVolume"
    ]
  },
  {
    "__docId__": 331,
    "kind": "test",
    "name": "describe38",
    "testId": 38,
    "memberof": "tests/browser/main/player.spec.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "tests/browser/main/player.spec.js~describe31.describe38",
    "access": null,
    "description": "Player.setRate",
    "lineNumber": 125,
    "testTargets": [
      "Player#setRate"
    ]
  },
  {
    "__docId__": 332,
    "kind": "test",
    "name": "describe39",
    "testId": 39,
    "memberof": "tests/browser/main/player.spec.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "tests/browser/main/player.spec.js~describe31.describe39",
    "access": null,
    "description": "Player.getRate",
    "lineNumber": 148,
    "testTargets": [
      "Player#getRate"
    ]
  },
  {
    "__docId__": 333,
    "kind": "test",
    "name": "describe40",
    "testId": 40,
    "memberof": "tests/browser/main/player.spec.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "tests/browser/main/player.spec.js~describe31.describe40",
    "access": null,
    "description": "Test player's title integration",
    "lineNumber": 172,
    "testTargets": [
      "Player#getTitle"
    ]
  },
  {
    "__docId__": 334,
    "kind": "test",
    "name": "describe41",
    "testId": 41,
    "memberof": "tests/browser/main/player.spec.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "tests/browser/main/player.spec.js~describe31.describe41",
    "access": null,
    "description": "The artists are parsed correctly from the url",
    "lineNumber": 197,
    "testTargets": [
      "Player#getArtists"
    ]
  },
  {
    "__docId__": 335,
    "kind": "test",
    "name": "describe42",
    "testId": 42,
    "memberof": "tests/browser/main/player.spec.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "tests/browser/main/player.spec.js~describe31.describe42",
    "access": null,
    "description": "Feature:",
    "lineNumber": 222,
    "testTargets": [
      "Player#getCover"
    ]
  },
  {
    "__docId__": 336,
    "kind": "test",
    "name": "describe43",
    "testId": 43,
    "memberof": "tests/browser/main/player.spec.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "tests/browser/main/player.spec.js~describe31.describe43",
    "access": null,
    "description": "Player.getPosition",
    "lineNumber": 251
  },
  {
    "__docId__": 337,
    "kind": "test",
    "name": "describe44",
    "testId": 44,
    "memberof": "tests/browser/main/player.spec.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "tests/browser/main/player.spec.js~describe31.describe44",
    "access": null,
    "description": "Player.play",
    "lineNumber": 270
  },
  {
    "__docId__": 338,
    "kind": "test",
    "name": "it45",
    "testId": 45,
    "memberof": "tests/browser/main/player.spec.js~describe31.describe44",
    "testDepth": 2,
    "static": true,
    "longname": "tests/browser/main/player.spec.js~describe31.describe44.it45",
    "access": null,
    "lineNumber": 271
  },
  {
    "__docId__": 339,
    "kind": "test",
    "name": "describe46",
    "testId": 46,
    "memberof": "tests/browser/main/player.spec.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "tests/browser/main/player.spec.js~describe31.describe46",
    "access": null,
    "description": "Player.getUrl",
    "lineNumber": 292
  },
  {
    "__docId__": 340,
    "kind": "test",
    "name": "describe47",
    "testId": 47,
    "memberof": "tests/browser/main/player.spec.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "tests/browser/main/player.spec.js~describe31.describe47",
    "access": null,
    "description": "Player.isLooping",
    "lineNumber": 311
  },
  {
    "__docId__": 341,
    "kind": "test",
    "name": "describe48",
    "testId": 48,
    "memberof": "tests/browser/main/player.spec.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "tests/browser/main/player.spec.js~describe31.describe48",
    "access": null,
    "description": "Player.setLoop",
    "lineNumber": 328
  },
  {
    "__docId__": 342,
    "kind": "test",
    "name": "describe49",
    "testId": 49,
    "memberof": "tests/browser/main/player.spec.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "tests/browser/main/player.spec.js~describe31.describe49",
    "access": null,
    "description": "Player.pause",
    "lineNumber": 345
  },
  {
    "__docId__": 343,
    "kind": "test",
    "name": "it50",
    "testId": 50,
    "memberof": "tests/browser/main/player.spec.js~describe31.describe49",
    "testDepth": 2,
    "static": true,
    "longname": "tests/browser/main/player.spec.js~describe31.describe49.it50",
    "access": null,
    "lineNumber": 346
  },
  {
    "__docId__": 344,
    "kind": "test",
    "name": "it51",
    "testId": 51,
    "memberof": "tests/browser/main/player.spec.js~describe31.describe49",
    "testDepth": 2,
    "static": true,
    "longname": "tests/browser/main/player.spec.js~describe31.describe49.it51",
    "access": null,
    "lineNumber": 360
  },
  {
    "__docId__": 345,
    "kind": "test",
    "name": "describe52",
    "testId": 52,
    "memberof": "tests/browser/main/player.spec.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "tests/browser/main/player.spec.js~describe31.describe52",
    "access": null,
    "description": "Player.playPause",
    "lineNumber": 376
  },
  {
    "__docId__": 346,
    "kind": "test",
    "name": "describe53",
    "testId": 53,
    "memberof": "tests/browser/main/player.spec.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "tests/browser/main/player.spec.js~describe31.describe53",
    "access": null,
    "description": "Player.stop",
    "lineNumber": 404
  },
  {
    "__docId__": 347,
    "kind": "test",
    "name": "describe54",
    "testId": 54,
    "memberof": "tests/browser/main/player.spec.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "tests/browser/main/player.spec.js~describe31.describe54",
    "access": null,
    "description": "Player.seek",
    "lineNumber": 427
  },
  {
    "__docId__": 348,
    "kind": "test",
    "name": "describe55",
    "testId": 55,
    "memberof": "tests/browser/main/player.spec.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "tests/browser/main/player.spec.js~describe31.describe55",
    "access": null,
    "description": "Player.setPosition",
    "lineNumber": 448
  },
  {
    "__docId__": 349,
    "kind": "test",
    "name": "describe56",
    "testId": 56,
    "memberof": "tests/browser/main/player.spec.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "tests/browser/main/player.spec.js~describe31.describe56",
    "access": null,
    "description": "Player.getSiteDomain",
    "lineNumber": 468
  },
  {
    "__docId__": 350,
    "kind": "test",
    "name": "describe57",
    "testId": 57,
    "memberof": "tests/browser/main/player.spec.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "tests/browser/main/player.spec.js~describe31.describe57",
    "access": null,
    "description": "Player.isHidden",
    "lineNumber": 487
  },
  {
    "__docId__": 351,
    "kind": "test",
    "name": "it58",
    "testId": 58,
    "memberof": "tests/browser/main/player.spec.js~describe31.describe57",
    "testDepth": 2,
    "static": true,
    "longname": "tests/browser/main/player.spec.js~describe31.describe57.it58",
    "access": null,
    "lineNumber": 488
  },
  {
    "__docId__": 352,
    "kind": "test",
    "name": "it59",
    "testId": 59,
    "memberof": "tests/browser/main/player.spec.js~describe31.describe57",
    "testDepth": 2,
    "static": true,
    "longname": "tests/browser/main/player.spec.js~describe31.describe57.it59",
    "access": null,
    "lineNumber": 499
  },
  {
    "__docId__": 353,
    "kind": "test",
    "name": "describe60",
    "testId": 60,
    "memberof": "tests/browser/main/player.spec.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "tests/browser/main/player.spec.js~describe31.describe60",
    "access": null,
    "description": "Player.isValid",
    "lineNumber": 511
  },
  {
    "__docId__": 354,
    "kind": "testFile",
    "name": "tests/browser/popup/version.spec.js",
    "content": "describe('Version tests', () => {\n\n    parameterized(\n        'mayor, minor, patch should be valid numbers',\n        [\n            'vnumber.1.2',\n            'v1.five.2',\n            'v1.1.ten',\n            'v1.1.2-snapshot',\n            'beta-v1.1.2'\n        ],\n        (params) => {\n            expect(function () {new Version(params)}).toThrow(new Error(`${params} is not a valid semantic version.`))\n        }\n    );\n\n    parameterized(\n        '$latest should be greater than $current',\n        [\n            {latest: 'v0.0.2', current: 'v0.0.1'},\n            {latest: 'v0.0.10', current: 'v0.0.1'},\n            {latest: 'v0.1.0', current: 'v0.0.1'},\n            {latest: 'v0.1.5', current: 'v0.1.3'},\n            {latest: 'v1.1.3', current: 'v1.1.1'},\n            {latest: 'v100.300.200', current: 'v10.5000.4566233'},\n        ],\n        (params) => {\n            const latest = new Version(params.latest),\n                current = new Version(params.current);\n            expect(latest.isGreaterThan(current)).toBe(true);\n        });\n\n    parameterized(\n        '$latest should be lower than $current',\n        [\n            {latest: 'v0.3.10', current: 'v0.4.0'},\n            {latest: 'v0.3.10', current: 'v4.4.0'},\n        ],\n        (params) => {\n            const latest = new Version(params.latest),\n                current = new Version(params.current);\n            expect(latest.isGreaterThan(current)).toBe(false);\n        });\n});\n",
    "static": true,
    "longname": "/home/travis/build/Lt-Mayonesa/browser-mpris2/tests/browser/popup/version.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 355,
    "kind": "test",
    "name": "describe61",
    "testId": 61,
    "memberof": "tests/browser/popup/version.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/browser/popup/version.spec.js~describe61",
    "access": null,
    "description": "Version tests",
    "lineNumber": 1
  }
]